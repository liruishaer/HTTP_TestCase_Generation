# -*- coding=utf-8 -*-
'''
function: 对句子进行句法分析，得到主谓宾元祖
author:lirui
date:2017-11-15
'''
from global_config import *
import en_core_web_sm
from subject_object_extraction import findSVOs,printDeps
nlp = en_core_web_sm.load()


sentence = 'A sender must not send a request with multiple headers with the same name.'
# sentence = 'The "*" value MUST NOT be generated by a proxy server; it may only be generated by an origin server.'

doc = nlp(sentence)

subject,predicate,object = [],[],[]

# replace entities and noun chuncks
spans = list(doc.ents) + list(doc.noun_chunks)
for span in spans:
    span.merge()

# 先找助动词
flag_root = False
root_text = ''
roots = [token.text for token in doc if token.dep_=='ROOT' and token.pos_=='VERB']
if roots:
    root_text = roots[0]
    predicate.append(root_text)
    flag_root = True

if flag_root==False:
    exit()


for i in range(0,len(doc)):
    token = doc[i]
    print(token.text, token.dep_, token.head.text, token.head.pos_,
          [child for child in token.children], [child for child in (token.ancestors)])

    if token.head.text == root_text:
        # 找主语
        if token.dep_ in SUBJECTS:
            subject.append(token.text)

        # 找助动词
        elif token.dep_ in AUXVERT and token.pos_ == 'VERB' and token.text in Modal_Words:
            # 是否有否定词修饰
            if i+1 < len(doc) and doc[i+1].text.lower()=='not':
                predicate.append(token.text + ' not')
            else:
                predicate.append(token.text)
        # 找宾语
        elif token.dep_ in OBJECTS:
            # 宾语的修饰语
            print(''.join(w.text_with_ws for w in token.subtree))
            object.append(token.text)


my_sub = '('+','.join(subject)+')'
my_verb = '('+','.join(predicate)+')'
my_obj = '('+','.join(object)+')'

print('My_Result:<',my_sub,',',my_verb,',',my_obj,'>')


'''
A det sender NOUN [] [sender, send]
sender nsubj send VERB [A] [send]
must aux send VERB [] [send]
not neg send VERB [] [send]
send ROOT send VERB [sender, must, not, request, with, .] []
a det request NOUN [] [request, send]
request dobj send VERB [a, with] [send]
with prep request NOUN [headers] [request, send]
multiple amod headers NOUN [] [headers, with, request, send]
headers pobj with ADP [multiple] [with, request, send]
with prep send VERB [name] [send]
the det name NOUN [] [name, with, send]
same amod name NOUN [] [name, with, send]
name pobj with ADP [the, same] [with, send]
. punct send VERB [] [send]
'''
# 2. findSVOs
print("-----------------------------------------------")
svos = findSVOs(doc)
# printDeps(doc)
print('My_Result:',svos)

