[.* has .* to .*]	
In addition, the proliferation of incompletely-implemented applications calling themselves "HTTP/1.0" has necessitated a protocol version change in order for two communicating applications to determine each other's true capabilities.



[.* MUST .*]	
 An implementation is not compliant if it fails to satisfy one or more of the MUST or REQUIRED level requirements for the protocols it implements.



[.* SHOULD .*]	[.* MUST .*]	
An implementation that satisfies all the MUST or REQUIRED level and all the SHOULD level requirements for its protocols is said to be "unconditionally compliant"; one that satisfies all the MUST level requirements but not all the SHOULD level requirements for its protocols is said to be "conditionally compliant."



[.* can .*]	
 response An HTTP response message, as defined in section 6. resource A network data object or service that can be identified by a URI, as defined in section 3.2.



[.* may .*]	
Resources may be available in multiple representations (e.g, multiple languages, data formats, size, and resolutions) or vary in other ways.



[.* may .*]	
There may exist multiple representations associated with a particular response status.



[.* can .*]	
The representation of entities in any response can be negotiated (including error responses).



[.* may .*]	
 variant A resource may have one, or more than one, representation(s) associated with it at any given instant.



[.* may .*]	
Any given program may be capable of being both a client and a server; our use of these terms refers only to the role being performed by the program for a particular connection, rather than to the program's capabilities in general.



[.* may .*]	
Likewise, any server may act as an origin server, proxy, gateway, or tunnel, switching behavior based on the nature of each request.



[.* MUST .*]	
A proxy MUST implement both the client and server requirements of this specification.



[.* either .* or .*]	
Except where either transparent or non-transparent behavior is explicitly stated, the HTTP proxy requirements apply to both types of proxies.



[.* may .*]	
Unlike a proxy, a gateway receives requests as if it were the origin server for the requested resource; the requesting client may not be aware that it is communicating with a gateway.



[.* may .*]	
Once active, a tunnel is not considered a party to the HTTP communication, though the tunnel may have been initiated by an HTTP request.



[.* may .*]	
Any client or server may include a cache, though a cache cannot be used by a server that is acting as a tunnel.



[.* can .*]	[.* may .*]	
Even if a resource is cacheable, there may be additional constraints on whether a cache can use the cached copy for a particular request.



[.* should .*]	
 explicit expiration time The time at which the origin server intends that an entity should no longer be returned by a cache without further validation.



[.* neither .* nor .*]	
 semantically transparent A cache behaves in a "semantically transparent" manner, with respect to a particular response, when its use affects neither the requesting client nor the origin server, except to improve performance.



[.* would .*]	
When a cache is semantically transparent, the client receives exactly the same response (except for hop-by-hop headers) that it would have received had its request been handled directly by the origin server.



[.* may .*]	
In the simplest case, this may be accomplished via a single connection (v) between the user agent (UA) and the origin server (O).



[.* may .*]	
This distinction is important because some HTTP communication options may apply only to the connection with the nearest, non-tunnel neighbor, only to the end-points of the chain, or to all connections along the chain.



[.* may .*]	
Although the diagram is linear, each participant may be engaged in multiple, simultaneous communications.



[.* may .*]	
For example, B may be receiving requests from many clients other than A, and/or forwarding requests to servers other than C, at the same time that it is handling A's request.



[.* may .*]	
 Any party to the communication which is not acting as a tunnel may employ an internal cache for handling requests.



[.* has .* to .*]	
The effect of a cache is that the request/response chain is shortened if one of the participants along the chain has a cached response applicable to that request.



[.* may .*]	
 Not all responses are usefully cacheable, and some requests may contain modifiers which place special requirements on cache behavior.



[.* can .*]	
The default port is TCP 80 [19], but other ports can be used.



[.* can .*]	
HTTP only presumes a reliable transport; any protocol that provides such guarantees can be used; the mapping of the HTTP/1.1 request and response structures onto the transport data units of the protocol in question is outside the scope of this specification.



[.* may .*]	
In HTTP/1.1, a connection may be used for one or more request/response exchanges, although connections may be closed for a variety of reasons (see section 8.1).



[.* need .* to .*]	
Implementors will need to be familiar with the notation in order to understand this specification.



[.* can .*]	
This makes the usual form of lists very easy; a rule such as ( *LWS element *( *LWS "," *LWS element )) can be shown as 1#element Wherever this construct is used, null elements are allowed, but do not contribute to the count of elements present.



[.* MUST .*]	
Therefore, where at least one element is required, at least one non-null element MUST be present.



[.* can .*]	
Except where noted otherwise, linear white space (LWS) can be included between any two adjacent words (token or quoted-string), and between adjacent words and separators, without changing the interpretation of a field.



[.* would .*]	[.* MUST .*]	
 separators) MUST exist between any two tokens (for the definition of "token" below), since they would otherwise be interpreted as a single token.



[.* can .*]	
 HTTP/1.1 header field values can be folded onto multiple lines if the continuation line begins with a space or horizontal tab.



[.* MAY .*]	
A recipient MAY replace any linear white space with a single SP before interpreting the field value or forwarding the message downstream.



[.* MAY .*]	
Words of *TEXT MAY contain characters from character sets other than ISO- 8859-1 [22] only when encoded according to the rules of RFC 2047 [14].



[.* MUST .*]	
These special characters MUST be in a quoted string to be used within a parameter value (as defined in section 3.6).



[.* can .*]	
 Comments can be included in some HTTP header fields by surrounding the comment text with parentheses.



[.* MAY .*]	
 The backslash character ("\") MAY be used as a single-character quoting mechanism only within quoted-string and comment constructs.



[.* may .*]	
The <minor> number is incremented when the changes made to the protocol add features which do not change the general message parsing algorithm, but which may add to the message semantics and imply additional capabilities of the sender.



[.* MUST .*]	[.* MAY .*]	
 Note that the major and minor numbers MUST be treated as separate integers and that each MAY be incremented higher than a single digit.



[.* MUST .*]	
Leading zeros MUST be ignored by recipients and MUST NOT be sent.



[.* MUST .*]	
 An application that sends a request or response message that includes HTTP-Version of "HTTP/1.1" MUST be at least conditionally compliant with this specification.



[.* SHOULD .*]	[.* MUST .*]	
Applications that are at least conditionally compliant with this specification SHOULD use an HTTP-Version of "HTTP/1.1" in their messages, and MUST do so for any message that is not compatible with HTTP/1.0.



[.* MUST .*]	
Since the protocol version indicates the protocol capability of the sender, a proxy/gateway MUST NOT send a message with a version indicator which is greater than its actual version.



[.* either .* or .*]	[.* MUST .*]	
If a higher version request is received, the proxy/gateway MUST either downgrade the request version, or respond with an error, or switch to tunnel behavior.



[.* MUST .*]	
 Due to interoperability problems with HTTP/1.0 proxies discovered since the publication of RFC 2068[33], caching proxies MUST, gateways MAY, and tunnels MUST NOT upgrade the request to the highest version they support.



[.* MUST .*]	
The proxy/gateway's response to that request MUST be in the same major version as the request.



[.* may .*]	
 Note: Converting between versions of HTTP may involve modification of header fields required or forbidden by the versions involved.



[.* can .*]	
 URIs in HTTP can be represented in absolute form or relative to some known base URI [11], depending upon the context of their use.



[.* could .*]	[.* SHOULD .*]	[.* MUST .*]	
Servers MUST be able to handle the URI of any resource they serve, and SHOULD be able to handle URIs of unbounded length if they provide GET-based forms that could generate such URIs.



[.* can .*]	[.* SHOULD .*]	
A server SHOULD return 414 (Request-URI Too Long) status if a URI is longer than the server can handle (see section 10.4.15).



[.* might .*]	
 Note: Servers ought to be cautious about depending on URI lengths above 255 bytes, because some older client or proxy implementations might not properly support these lengths.



[.* SHOULD .*]	
The use of IP addresses in URLs SHOULD be avoided whenever possible (see RFC 1900 [24]).



[.* MUST .*]	
If the abs_path is not present in the URL, it MUST be given as "/" when used as a Request-URI for a resource (section 5.1.2).



[.* MAY .*]	
If a proxy receives a host name which is not a fully qualified domain name, it MAY add its domain to the host name it received.



[.* MUST .*]	
If a proxy receives a fully qualified domain name, the proxy MUST NOT change the host name.



[.* SHOULD .*]	
 When comparing two URIs to decide if they match or not, a client SHOULD use a case-sensitive octet-by-octet comparison of the entire URIs, with these exceptions:



[.* MUST .*]	
 - Comparisons of host names MUST be case-insensitive;



[.* MUST .*]	
 - Comparisons of scheme names MUST be case-insensitive;



[.* MUST .*]	
HTTP/1.1 clients and servers that parse the date value MUST accept all three formats (for compatibility with HTTP/1.0), though they MUST only generate the RFC 1123 format for representing HTTP-date values in header fields.



[.* may .*]	[.* have .* to .*]	
 Note: Recipients of date values are encouraged to be robust in accepting date values that may have been sent by non-HTTP applications, as is sometimes the case when retrieving or posting messages via proxies/gateways to SMTP or NNTP.



[.* MUST .*]	
All HTTP date/time stamps MUST be represented in Greenwich Mean Time (GMT), without exception.



[.* MUST .*]	
This is indicated in the first two formats by the inclusion of "GMT" as the three-letter abbreviation for time zone, and MUST be assumed when reading the asctime format.



[.* MUST .*]	
HTTP-date is case sensitive and MUST NOT include additional LWS beyond that specifically included as SP in the grammar.



[.* may .*]	
Note that unconditional conversion in the other direction is not required, in that not all characters may be available in a given character set and a character set may provide more than one sequence of octets to represent a particular character.



[.* MUST .*]	
However, the definition associated with a MIME character set name MUST fully specify the mapping to be performed from octets to characters.



[.* MUST .*]	
 Although HTTP allows an arbitrary token to be used as a charset value, any token that has a predefined value within the IANA Character Set registry [19] MUST represent the character set defined by that registry.



[.* SHOULD .*]	
Applications SHOULD limit their use of character sets to those defined by the IANA registry.



[.* should .*]	
 Implementors should be aware of IETF character set requirements [38] [41].



[.* should .*]	[.* has .* to .*]	
 Some HTTP/1.0 software has interpreted a Content-Type header without charset parameter incorrectly to mean "recipient should guess."



[.* SHOULD .*]	[.* MAY .*]	
Senders wishing to defeat this behavior MAY include a charset parameter even when the charset is ISO-8859-1 and SHOULD do so when it is known that it will not confuse the recipient.



[.* have .* to .*]	[.* MUST .*]	
HTTP/1.1 recipients MUST respect the charset label provided by the sender; and those user agents that have a provision to "guess" a charset MUST use the charset from the content-type field if they support that charset, rather than the recipient's preference, when initially displaying a document.



[.* can .*]	[.* has .* to .*]	
 Content coding values indicate an encoding transformation that has been or can be applied to an entity.



[.* SHOULD .*]	
For compatibility with previous implementations of HTTP, applications SHOULD consider "x-gzip" and "x-compress" to be equivalent to "gzip" and "compress" respectively.



[.* SHOULD .*]	
This content-coding is used only in the Accept- Encoding header, and SHOULD NOT be used in the Content-Encoding header.



[.* SHOULD .*]	
 New content-coding value tokens SHOULD be registered; to allow interoperability between clients and servers, specifications of the content coding algorithms needed to implement a new value SHOULD be publicly available and adequate for independent implementation, and conform to the purpose of content coding defined in this section.



[.* can .*]	[.* may .*]	[.* has .* to .*]	[.* need .* to .*]	
 Transfer-coding values are used to indicate an encoding transformation that has been, can be, or may need to be applied to an entity-body in order to ensure "safe transport" through the network.



[.* MUST .*]	
 Whenever a transfer-coding is applied to a message-body, the set of transfer-codings MUST include "chunked", unless the message is terminated by closing the connection.



[.* MUST .*]	
When the "chunked" transfer- coding is used, it MUST be the last transfer-coding applied to the message-body.



[.* MUST .*]	
The "chunked" transfer-coding MUST NOT be applied more than once to a message-body.



[.* SHOULD .*]	
 New transfer-coding value tokens SHOULD be registered in the same way as new content-coding value tokens (section 3.5).



[.* SHOULD .*]	
 A server which receives an entity-body with a transfer-coding it does not understand SHOULD return 501 (Unimplemented), and close the connection.



[.* MUST .*]	
A server MUST NOT send transfer-codings to an HTTP/1.0 client.



[.* can .*]	
The Trailer header field can be used to indicate which header fields are included in a trailer (see section 14.40).



[.* MUST .*]	
A server using chunked transfer-coding in a response MUST NOT use the trailer for any header fields unless at least one of the following is true:



[.* could .*]	
 b)the server is the origin server for the response, the trailer fields consist entirely of optional metadata, and the recipient could use the message (in a manner acceptable to the origin server) without receiving this metadata.



[.* might .*]	
In other words, the origin server is willing to accept the possibility that the trailer fields might be silently discarded along the path to the client.



[.* would .*]	
It avoids a situation where compliance with the protocol would have necessitated a possibly infinite buffer on the proxy.



[.* MUST .*]	
 All HTTP/1.1 applications MUST be able to receive and decode the "chunked" transfer-coding, and MUST ignore chunk-extension extensions they do not understand.



[.* MAY .*]	
 Parameters MAY follow the type/subtype in the form of attribute/value pairs (as defined in section 3.6).



[.* might .*]	
Parameter values might or might not be case-sensitive, depending on the semantics of the parameter name.



[.* MUST .*]	
Linear white space (LWS) MUST NOT be used between the type and subtype, nor between an attribute and its value.



[.* might .*]	
The presence or absence of a parameter might be significant to the processing of a media-type, depending on its definition within the media type registry.



[.* SHOULD .*]	
When sending data to older HTTP applications, implementations SHOULD only use media type parameters when they are required by that type/subtype definition.



[.* MUST .*]	
An entity-body transferred via HTTP messages MUST be represented in the appropriate canonical form prior to its transmission except for "text" types, as defined in the next paragraph.



[.* MUST .*]	
HTTP applications MUST accept CRLF, bare CR, and bare LF as being representative of a line break in text media received via HTTP.



[.* MUST .*]	
This flexibility regarding line breaks applies only to text media in the entity-body; a bare CR or LF MUST NOT be substituted for CRLF within any of the HTTP control structures (such as header fields and multipart boundaries).



[.* MUST .*]	
 If an entity-body is encoded with a content-coding, the underlying data MUST be in a form defined above prior to being encoded.



[.* MUST .*]	
Data in character sets other than "ISO-8859-1" or its subsets MUST be labeled with an appropriate charset value.



[.* MUST .*]	
All multipart types share a common syntax, as defined in section 5.1.1 of RFC 2046 [40], and MUST include a boundary parameter as part of the media type value.



[.* MUST .*]	
The message body is itself a protocol element and MUST therefore use only CRLF to represent line breaks between body-parts.



[.* MUST .*]	
Unlike in RFC 2046, the epilogue of any multipart message MUST be empty; HTTP applications MUST NOT transmit the epilogue (even if the original multipart contains an epilogue).



[.* would .*]	[.* SHOULD .*]	
In all other cases, an HTTP user agent SHOULD follow the same or similar behavior as a MIME user agent would upon receipt of a multipart type.



[.* have .* to .*]	
The MIME header fields within each body-part of a multipart message- body do not have any significance to HTTP beyond that defined by their MIME semantics.



[.* would .*]	[.* SHOULD .*]	
 In general, an HTTP user agent SHOULD follow the same or similar behavior as a MIME user agent would upon receipt of a multipart type.



[.* MUST .*]	
If an application receives an unrecognized multipart subtype, the application MUST treat it as being equivalent to "multipart/mixed".



[.* SHOULD .*]	
 User-Agent: CERN-LineMode/2.15 libwww/2.17b3 Server: Apache/0.8.4 Product tokens SHOULD be short and to the point.



[.* MUST .*]	
They MUST NOT be used for advertising or other non-essential information.



[.* SHOULD .*]	[.* MAY .*]	
Although any token character MAY appear in a product-version, this token SHOULD only be used for a version identifier (i.e., successive versions of the same product SHOULD only differ in the product-version portion of the product value).



[.* MUST .*]	
HTTP/1.1 applications MUST NOT generate more than three digits after the decimal point.



[.* SHOULD .*]	
User configuration of these values SHOULD also be limited in this fashion.



[.* could .*]	
(The last three tags above are not registered tags; all but the last are examples of tags which could be registered in future.)



[.* MAY .*]	
 A "strong entity tag" MAY be shared by two entities of a resource only if they are equivalent by octet equality.



[.* could .*]	[.* MAY .*]	
 A "weak entity tag," indicated by the "W/" prefix, MAY be shared by two entities of a resource only if the entities are equivalent and could be substituted for each other with no significant change in semantics.



[.* can .*]	
A weak entity tag can only be used for weak comparison.



[.* MUST .*]	
 An entity tag MUST be unique across all versions of all entities associated with a particular resource.



[.* MAY .*]	
A given entity tag value MAY be used for entities obtained by requests on different URIs.



[.* can .*]	
An entity can be broken down into subranges according to various structural units.



[.* MAY .*]	
HTTP/1.1 implementations MAY ignore ranges specified using other units.



[.* has .* to .*]	
HTTP/1.1 has been designed to allow implementations of applications that do not depend on knowledge of ranges.



[.* SHOULD .*]	
 In the interest of robustness, servers SHOULD ignore any empty line(s) received where a Request-Line is expected.



[.* should .*]	
In other words, if the server is reading the protocol stream at the beginning of a message and receives a CRLF first, it should ignore the CRLF.



[.* MUST .*]	
To restate what is explicitly forbidden by the BNF, an HTTP/1.1 client MUST NOT preface or follow a request with an extra CRLF.



[.* MAY .*]	
The field value MAY be preceded by any amount of LWS, though a single SP is preferred.



[.* can .*]	
Header fields can be extended over multiple lines by preceding each extra line with at least one SP or HT.



[.* might .*]	[.* ought .* to .*]	
Applications ought to follow "common form", where one is known or indicated, when generating HTTP constructs, since there might exist some implementations that fail to accept anything beyond the common forms.



[.* either .* or .*]	
 message-header = field-name ":" [ field-value ] field-name     = token field-value    = *( field-content | LWS ) field-content  = <the OCTETs making up the field-value and consisting of either *TEXT or combinations of token, separators, and quoted-string>



[.* MAY .*]	
Such leading or trailing LWS MAY be removed without changing the semantics of the field value.



[.* MAY .*]	
Any LWS that occurs between field-content MAY be replaced with a single SP before interpreting the field value or forwarding the message downstream.



[.* MAY .*]	
 Multiple message-header fields with the same field-name MAY be present in a message if and only if the entire field-value for that header field is defined as a comma-separated list [i.e., #(values)].



[.* MUST .*]	
It MUST be possible to combine the multiple header fields into one "field-name: field-value" pair, without changing the semantics of the message, by appending each subsequent field-value to the first, each separated by a comma.



[.* MUST .*]	
The order in which header fields with the same field-name are received is therefore significant to the interpretation of the combined field value, and thus a proxy MUST NOT change the order of these field values when a message is forwarded.



[.* MUST .*]	
 Transfer-Encoding MUST be used to indicate any transfer-codings applied by an application to ensure safe and proper transfer of the message.



[.* MAY .*]	
Transfer-Encoding is a property of the message, not of the entity, and thus MAY be added or removed by any application along the request/response chain.



[.* may .*]	
(However, section 3.6 places restrictions on when certain transfer-codings may be used.)



[.* MUST .*]	
A message-body MUST NOT be included in a request if the specification of the request method (section 5.1.1) does not allow sending an entity-body in requests.



[.* SHOULD .*]	
A server SHOULD read and forward a message-body on any request; if the request method does not include defined semantics for an entity-body, then the message-body SHOULD be ignored when handling the request.



[.* might .*]	[.* MUST .*]	
All responses to the HEAD request method MUST NOT include a message-body, even though the presence of entity- header fields might lead one to believe they do.



[.* MUST .*]	
All 1xx (informational), 204 (no content), and 304 (not modified) responses MUST NOT include a message-body.



[.* MAY .*]	
All other responses do include a message-body, although it MAY be of zero length.



[.* MUST .*]	
The Content-Length header field MUST NOT be sent if these two lengths are different (i.e., if a Transfer-Encoding header field is present).



[.* MUST .*]	
If a message is received with both a Transfer-Encoding header field and a Content-Length header field, the latter MUST be ignored.



[.* can .*]	
This media type UST NOT be used unless the sender knows that the recipient can arse it; the presence in a request of a Range header with ultiple byte- range specifiers from a 1.1 client implies that the lient can parse multipart/byteranges responses.



[.* might .*]	[.* MUST .*]	
 A range header might be forwarded by a 1.0 proxy that does not understand multipart/byteranges; in this case the server MUST delimit the message using methods defined in items 1,3 or 5 of this section.



[.* would .*]	
(Closing the connection cannot be used to indicate the end of a request body, since that would leave no possibility for the server to send back a response.)



[.* MUST .*]	
 For compatibility with HTTP/1.0 applications, HTTP/1.1 requests containing a message-body MUST include a valid Content-Length header field unless the server is known to be HTTP/1.1 compliant.



[.* SHOULD .*]	
If a request contains a message-body and a Content-Length is not given, the server SHOULD respond with 400 (bad request) if it cannot determine the length of the message, or with 411 (length required) if it wishes to insist on receiving a valid Content-Length.



[.* MUST .*]	
 All HTTP/1.1 applications that receive entities MUST accept the "chunked" transfer-coding (section 3.6), thus allowing this mechanism to be used for messages when the message length cannot be determined in advance.



[.* MUST .*]	
 Messages MUST NOT include both a Content-Length header field and a non-identity transfer-coding.



[.* MUST .*]	
If the message does include a non- identity transfer-coding, the Content-Length MUST be ignored.



[.* MUST .*]	
 When a Content-Length is given in a message where a message-body is allowed, its field value MUST exactly match the number of OCTETs in the message-body.



[.* MUST .*]	
HTTP/1.1 user agents MUST notify the user when an invalid length is received and detected.



[.* have .* to .*]	
 There are a few header fields which have general applicability for both request and response messages, but which do not apply to the entity being transferred.



[.* can .*]	
 General-header field names can be extended reliably only in combination with a change in the protocol version.



[.* may .*]	
However, new or experimental header fields may be given the semantics of general header fields if all parties in the communication recognize them to be general-header fields.



[.* can .*]	
 The list of methods allowed by a resource can be specified in an Allow header field (section 14.7).



[.* can .*]	
The return code of the response always notifies the client whether a method is currently allowed on a resource, since the set of allowed methods can change dynamically.



[.* SHOULD .*]	
An origin server SHOULD return the status code 405 (Method Not Allowed) if the method is known by the origin server but not allowed for the requested resource, and 501 (Not Implemented) if the method is unrecognized or not implemented by the origin server.



[.* MUST .*]	
The methods GET and HEAD MUST be supported by all general-purpose servers.



[.* MUST .*]	
All other methods are OPTIONAL; however, if the above methods are implemented, they MUST be implemented with the same semantics as those specified in section 9.



[.* would .*]	
One example would be



[.* MAY .*]	
Note that the proxy MAY forward the request on to another proxy or directly to the server specified by the absoluteURI.



[.* MUST .*]	
In order to avoid request loops, a proxy MUST be able to recognize all of its server names, including any aliases, local variations, and the numeric IP address.



[.* would .*]	
An example Request-Line would be:



[.* MUST .*]	
 To allow for transition to absoluteURIs in all requests in future versions of HTTP, all HTTP/1.1 servers MUST accept the absoluteURI form in requests, even though HTTP/1.1 clients will only generate them in requests to proxies.



[.* MUST .*]	
In this case the absolute path of the URI MUST be transmitted (see section 3.2.1, abs_path) as the Request-URI, and the network location of the URI (authority) MUST be transmitted in a Host header field.



[.* would .*]	
For example, a client wishing to retrieve the resource above directly from the origin server would create a TCP connection to port 80 of the host "www.w3.org" and send the lines:



[.* MUST .*]	
Note that the absolute path cannot be empty; if none is present in the original URI, it MUST be given as "/" (the server root).



[.* MUST .*]	
If the Request-URI is encoded using the "% HEX HEX" encoding [42], the origin server MUST decode the Request-URI in order to properly interpret the request.



[.* SHOULD .*]	
Servers SHOULD respond to invalid Request-URIs with an appropriate status code.



[.* MUST .*]	
 A transparent proxy MUST NOT rewrite the "abs_path" part of the received Request-URI when forwarding it to the next inbound server, except as noted above to replace a null abs_path with "/".



[.* should .*]	[.* have .* to .*]	
Implementors should be aware that some pre-HTTP/1.1 proxies have been known to rewrite the Request-URI.



[.* MAY .*]	
 An origin server that does not allow resources to differ by the requested host MAY ignore the Host header field value when determining the resource identified by an HTTP/1.1 request.



[.* MUST .*]	
 An origin server that does differentiate resources based on the host requested (sometimes referred to as virtual hosts or vanity host names) MUST use the following rules for determining the requested resource on an HTTP/1.1 request:



[.* MUST .*]	
Any Host header field value in the request MUST be ignored.



[.* MUST .*]	
If the host as determined by rule 1 or 2 is not a valid host on the server, the response MUST be a 400 (Bad Request) error message.



[.* MAY .*]	
 Recipients of an HTTP/1.0 request that lacks a Host header field MAY attempt to use heuristics (e.g,, examination of the URI path for something unique to a particular host) in order to determine what exact resource is being requested.



[.* can .*]	
 Request-header field names can be extended reliably only in combination with a change in the protocol version.



[.* MAY .*]	
However, new or experimental header fields MAY be given the semantics of request- header fields if all parties in the communication recognize them to be request-header fields.



[.* must .*]	
 - 3xx: Redirection - Further action must be taken in order to complete the request



[.* MAY .*]	
The reason phrases listed here are only recommendations -- they MAY be replaced by local equivalents without affecting the protocol.



[.* MUST .*]	
However, applications MUST understand the class of any status code, as indicated by the first digit, and treat any unrecognized response as being equivalent to the x00 status code of that class, with the exception that an unrecognized response MUST NOT be cached.



[.* can .*]	
For example, if an unrecognized status code of 431 is received by the client, it can safely assume that there was something wrong with its request and treat the response as if it had received a 400 status code.



[.* SHOULD .*]	
In such cases, user agents SHOULD present to the user the entity returned with the response, since that entity is likely to include human- readable information which will explain the unusual status.



[.* can .*]	
 Response-header field names can be extended reliably only in combination with a change in the protocol version.



[.* MAY .*]	
However, new or experimental header fields MAY be given the semantics of response- header fields if all parties in the communication recognize them to be response-header fields.



[.* MAY .*]	
 Request and Response messages MAY transfer an entity if not otherwise restricted by the request method or response status code.



[.* either .* or .*]	
 In this section, both sender and recipient refer to either the client or the server, depending on who sends and who receives the entity.



[.* might .*]	
Some of this metainformation is OPTIONAL; some might be REQUIRED by portions of this specification.



[.* SHOULD .*]	[.* MUST .*]	
Unrecognized header fields SHOULD be ignored by the recipient and MUST be forwarded by transparent proxies.



[.* might .*]	[.* have .* to .*]	
The entity-body is obtained from the message-body by decoding any Transfer-Encoding that might have been applied to ensure safe and proper transfer of the message.



[.* may .*]	
Content-Encoding may be used to indicate any additional content codings applied to the data, usually for the purpose of data compression, that are a property of the requested resource.



[.* SHOULD .*]	
 Any HTTP/1.1 message containing an entity-body SHOULD include a Content-Type header field defining the media type of that body.



[.* MAY .*]	
If and only if the media type is not given by a Content-Type field, the recipient MAY attempt to guess the media type via inspection of its content and/or the name extension(s) of the URI used to identify the resource.



[.* SHOULD .*]	
If the media type remains unknown, the recipient SHOULD treat it as type "application/octet-stream".



[.* can .*]	
 - By opening and closing fewer TCP connections, CPU time is saved in routers and hosts (clients, servers, proxies, gateways, tunnels, or caches), and memory used for TCP protocol control blocks can be saved in hosts.



[.* can .*]	
 - HTTP requests and responses can be pipelined on a connection.



[.* can .*]	
 - HTTP can evolve more gracefully, since errors can be reported without the penalty of closing the TCP connection.



[.* might .*]	
Clients using future versions of HTTP might optimistically try a new feature, but if communicating with an older server, retry with old semantics after an error is reported.



[.* SHOULD .*]	
 HTTP implementations SHOULD implement persistent connections.



[.* SHOULD .*]	
That is, unless otherwise indicated, the client SHOULD assume that the server will maintain a persistent connection, even after error responses from the server.



[.* can .*]	
 Persistent connections provide a mechanism by which a client and a server can signal the close of a TCP connection.



[.* MUST .*]	
Once a close has been signaled, the client MUST NOT send any more requests on that connection.



[.* MAY .*]	
 An HTTP/1.1 server MAY assume that a HTTP/1.1 client intends to maintain a persistent connection unless a Connection header including the connection-token "close" was sent in the request.



[.* SHOULD .*]	
If the server chooses to close the connection immediately after sending the response, it SHOULD send a Connection header including the connection-token close.



[.* would .*]	[.* MAY .*]	
 An HTTP/1.1 client MAY expect a connection to remain open, but would decide to keep it open based on whether the response from a server contains a Connection header with the connection-token close.



[.* SHOULD .*]	
In case the client does not want to maintain a connection for more than that request, it SHOULD send a Connection header including the connection-token close.



[.* either .* or .*]	
 If either the client or the server sends the close token in the Connection header, that request becomes the last one for the connection.



[.* SHOULD .*]	
 Clients and servers SHOULD NOT assume that a persistent connection is maintained for HTTP versions less than 1.1 unless it is explicitly signaled.



[.* MUST .*]	
 In order to remain persistent, all messages on the connection MUST have a self-defined message length (i.e., one not defined by closure of the connection), as described in section 4.4.



[.* MAY .*]	
 A client that supports persistent connections MAY "pipeline" its requests (i.e., send multiple requests without waiting for each response).



[.* MUST .*]	
A server MUST send its responses to those requests in the same order that the requests were received.



[.* SHOULD .*]	
 Clients which assume persistent connections and pipeline immediately after connection establishment SHOULD be prepared to retry their connection if the first pipelined attempt fails.



[.* MUST .*]	
If a client does such a retry, it MUST NOT pipeline before it knows the connection is persistent.



[.* MUST .*]	
Clients MUST also be prepared to resend their requests if the server closes the connection before sending all of the corresponding responses.



[.* SHOULD .*]	
 Clients SHOULD NOT pipeline requests using non-idempotent methods or non-idempotent sequences of methods (see section 9.1.2).



[.* could .*]	
Otherwise, a premature termination of the transport connection could lead to indeterminate results.



[.* SHOULD .*]	
A client wishing to send a non-idempotent request SHOULD wait to send that request until it has received the response status for the previous request.



[.* MUST .*]	
 The proxy server MUST signal persistent connections separately with its clients and the origin servers (or other proxy servers) that it connects to.



[.* MUST .*]	
 A proxy server MUST NOT establish a HTTP/1.1 persistent connection with an HTTP/1.0 client (but see RFC 2068 [33] for information and discussion of the problems with the Keep-Alive header implemented by many HTTP/1.0 clients).



[.* might .*]	
Proxy servers might make this a higher value since it is likely that the client will be making more connections through the same server.



[.* either .* or .*]	
The use of persistent connections places no requirements on the length (or existence) of this time-out for either the client or the server.



[.* SHOULD .*]	
When a client or server wishes to time-out it SHOULD issue a graceful close on the transport connection.



[.* SHOULD .*]	
Clients and servers SHOULD both constantly watch for the other side of the transport close, and respond to it as appropriate.



[.* could .*]	
If a client or server does not detect the other side's close promptly it could cause unnecessary resource drain on the network.



[.* MAY .*]	
 A client, server, or proxy MAY close the transport connection at any time.



[.* might .*]	[.* have .* to .*]	[.* has .* to .*]	
For example, a client might have started to send a new request at the same time that the server has decided to close the "idle" connection.



[.* MUST .*]	
 This means that clients, servers, and proxies MUST be able to recover from asynchronous close events.



[.* SHOULD .*]	
Client software SHOULD reopen the transport connection and retransmit the aborted sequence of requests without user interaction so long as the request sequence is idempotent (see section 9.1.2).



[.* MUST .*]	[.* MAY .*]	
Non-idempotent methods or sequences MUST NOT be automatically retried, although user agents MAY offer a human operator the choice of retrying the request(s).



[.* MAY .*]	
Confirmation by user-agent software with semantic understanding of the application MAY substitute for user confirmation.



[.* SHOULD .*]	
The automatic retry SHOULD NOT be repeated if the second sequence of requests fails.



[.* SHOULD .*]	
 Servers SHOULD always respond to at least one request per connection, if at all possible.



[.* SHOULD .*]	
Servers SHOULD NOT close a connection in the middle of transmitting a response, unless a network or client failure is suspected.



[.* SHOULD .*]	
 Clients that use persistent connections SHOULD limit the number of simultaneous connections that they maintain to a given server.



[.* SHOULD .*]	
A single-user client SHOULD NOT maintain more than 2 connections with any server or proxy.



[.* SHOULD .*]	
A proxy SHOULD use up to 2*N connections to another server or proxy, where N is the number of simultaneously active users.



[.* SHOULD .*]	
 HTTP/1.1 servers SHOULD maintain persistent connections and use TCP's flow control mechanisms to resolve temporary overloads, rather than terminating connections with the expectation that clients will retry.



[.* can .*]	
The latter technique can exacerbate network congestion.



[.* SHOULD .*]	
 An HTTP/1.1 (or later) client sending a message-body SHOULD monitor the network connection for an error status while it is transmitting the request.



[.* SHOULD .*]	
If the client sees an error status, it SHOULD immediately cease transmitting the body.



[.* MAY .*]	
If the body is being sent using a "chunked" encoding (section 3.6), a zero length chunk and empty trailer MAY be used to prematurely mark the end of the message.



[.* MUST .*]	
If the body was preceded by a Content-Length header, the client MUST close the connection.



[.* might .*]	[.* either .* or .*]	
In some cases, it might either be inappropriate or highly inefficient for the client to send the body if the server will reject the message without looking at the body.



[.* MUST .*]	
 - If a client will wait for a 100 (Continue) response before sending the request body, it MUST send an Expect request-header field (section 14.20) with the "100-continue" expectation.



[.* MUST .*]	
 - A client MUST NOT send an Expect request-header field (section 14.20) with the "100-continue" expectation if it does not intend to send a request body.



[.* may .*]	[.* either .* or .*]	
 Because of the presence of older implementations, the protocol allows ambiguous situations in which a client may send "Expect: 100- continue" without receiving either a 417 (Expectation Failed) status or a 100 (Continue) status.



[.* SHOULD .*]	
Therefore, when a client sends this header field to an origin server (possibly via a proxy) from which it has never seen a 100 (Continue) status, the client SHOULD NOT wait for an indefinite period before sending the request body.



[.* either .* or .*]	[.* MUST .*]	
 - Upon receiving a request which includes an Expect request-header field with the "100-continue" expectation, an origin server MUST either respond with 100 (Continue) status and continue to read from the input stream, or respond with a final status code.



[.* MUST .*]	
The origin server MUST NOT wait for the request body before sending the 100 (Continue) response.



[.* MAY .*]	
If it responds with a final status code, it MAY close the transport connection or it MAY continue to read and discard the rest of the request.



[.* MUST .*]	
It MUST NOT perform the requested method if it returns a final status code.



[.* SHOULD .*]	[.* MUST .*]	
 - An origin server SHOULD NOT send a 100 (Continue) response if the request message does not include an Expect request-header field with the "100-continue" expectation, and MUST NOT send a 100 (Continue) response if such a request comes from an HTTP/1.0 (or earlier) client.



[.* MAY .*]	
There is an exception to this rule: for compatibility with RFC 2068, a server MAY send a 100 (Continue) status in response to an HTTP/1.1 PUT or POST request that does not include an Expect request-header field with the "100- continue" expectation.



[.* MAY .*]	
 - An origin server MAY omit a 100 (Continue) response if it has already received some or all of the request body for the corresponding request.



[.* MUST .*]	
 - An origin server that sends a 100 (Continue) response MUST ultimately send a final status code, once the request body is received and processed, unless it terminates the transport connection prematurely.



[.* SHOULD .*]	
 - If an origin server receives a request that does not include an Expect request-header field with the "100-continue" expectation, the request includes a request body, and the server responds with a final status code before reading the entire request body from the transport connection, then the server SHOULD NOT close the transport connection until it has read the entire request, or until the client closes the connection.



[.* might .*]	
Otherwise, the client might not reliably receive the response message.



[.* either .* or .*]	[.* MUST .*]	
 - If a proxy receives a request that includes an Expect request- header field with the "100-continue" expectation, and the proxy either knows that the next-hop server complies with HTTP/1.1 or higher, or does not know the HTTP version of the next-hop server, it MUST forward the request, including the Expect header field.



[.* MUST .*]	
- If the proxy knows that the version of the next-hop server is HTTP/1.0 or lower, it MUST NOT forward the request, and it MUST respond with a 417 (Expectation Failed) status.



[.* SHOULD .*]	
 - Proxies SHOULD maintain a cache recording the HTTP version numbers received from recently-referenced next-hop servers.



[.* MUST .*]	
 - A proxy MUST NOT forward a 100 (Continue) response if the request message was received from an HTTP/1.0 (or earlier) client and did not include an Expect request-header field with the "100-continue" expectation.



[.* SHOULD .*]	
 If an HTTP/1.1 client sends a request which includes a request body, but which does not include an Expect request-header field with the "100-continue" expectation, and if the client is not directly connected to an HTTP/1.1 origin server, and if the client sees the connection close before receiving any status from the server, the client SHOULD retry the request.



[.* MAY .*]	
If the client does retry this request, it MAY use the following "binary exponential backoff" algorithm to be assured of obtaining a reliable response:



[.* either .* or .*]	
Wait either for an error response from the server, or for T seconds (whichever comes first)



[.* SHOULD .*]	
 - SHOULD NOT continue and



[.* SHOULD .*]	
 - SHOULD close the connection if it has not completed sending the request message.



[.* can .*]	
Although this set can be expanded, additional methods cannot be assumed to share the same semantics for separately extended clients and servers.



[.* MUST .*]	
 The Host request-header field (section 14.23) MUST accompany all HTTP/1.1 requests.



[.* should .*]	[.* may .*]	[.* might .*]	[.* have .* to .*]	
 Implementors should be aware that the software represents the user in their interactions over the Internet, and should be careful to allow the user to be aware of any actions they might take which may have an unexpected significance to themselves or others.



[.* SHOULD .*]	
 In particular, the convention has been established that the GET and HEAD methods SHOULD NOT have the significance of taking an action other than retrieval.



[.* can .*]	
 Methods can also have the property of "idempotence" in that (aside from error or expiration issues) the side-effects of N > 0 identical requests is the same as for a single request.



[.* SHOULD .*]	
Also, the methods OPTIONS and TRACE SHOULD NOT have side effects, and so are inherently idempotent.



[.* MUST .*]	
 If the OPTIONS request includes an entity-body (as indicated by the presence of Content-Length or Transfer-Encoding), then the media type MUST be indicated by a Content-Type field.



[.* might .*]	
Although this specification does not define any use for such a body, future extensions to HTTP might use the OPTIONS body to make more detailed queries on the server.



[.* MAY .*]	
A server that does not support such an extension MAY discard the request body.



[.* can .*]	
For example, this can be used to test a proxy for HTTP/1.1 compliance (or lack thereof).



[.* SHOULD .*]	
 A 200 response SHOULD include any header fields that indicate optional features implemented by the server and applicable to that resource (e.g,, Allow), possibly including extensions not defined by this specification.



[.* SHOULD .*]	
The response body, if any, SHOULD also include information about the communication options.



[.* might .*]	
The format for such a body is not defined by this specification, but might be defined by future extensions to HTTP.



[.* MAY .*]	
Content negotiation MAY be used to select the appropriate response format.



[.* MUST .*]	
If no response body is included, the response MUST include a Content-Length field with a field-value of "0".



[.* MAY .*]	
 The Max-Forwards request-header field MAY be used to target a specific proxy in the request chain.



[.* MUST .*]	
When a proxy receives an OPTIONS request on an absoluteURI for which request forwarding is permitted, the proxy MUST check for a Max-Forwards field.



[.* SHOULD .*]	[.* MUST .*]	
If the Max-Forwards field-value is zero ("0"), the proxy MUST NOT forward the message; instead, the proxy SHOULD respond with its own communication options.



[.* MUST .*]	
If the Max-Forwards field-value is an integer greater than zero, the proxy MUST decrement the field-value when it forwards the request.



[.* MUST .*]	
If no Max-Forwards field is present in the request, then the forwarded request MUST NOT include a Max-Forwards field.



[.* shall .*]	
If the Request-URI refers to a data-producing process, it is the produced data which shall be returned as the entity in the response and not the source text of the process, unless that text happens to be the output of the process.



[.* MUST .*]	
 The HEAD method is identical to GET except that the server MUST NOT return a message-body in the response.



[.* SHOULD .*]	
The metainformation contained in the HTTP headers in response to a HEAD request SHOULD be identical to the information sent in response to a GET request.



[.* can .*]	
This method can be used for obtaining metainformation about the entity implied by the request without transferring the entity-body itself.



[.* MAY .*]	
 The response to a HEAD request MAY be cacheable in the sense that the information contained in the response MAY be used to update a previously cached entity from that resource.



[.* would .*]	[.* MUST .*]	
If the new field values indicate that the cached entity differs from the current entity (as would be indicated by a change in Content-Length, Content-MD5, ETag or Last-Modified), then the cache MUST treat the cache entry as stale.



[.* can .*]	[.* might .*]	
 The action performed by the POST method might not result in a resource that can be identified by a URI.



[.* either .* or .*]	
In this case, either 200 (OK) or 204 (No Content) is the appropriate response status, depending on whether or not the response includes an entity that describes the result.



[.* has .* to .*]	[.* SHOULD .*]	
If a resource has been created on the origin server, the response SHOULD be 201 (Created) and contain an entity which describes the status of the request and refers to the new resource, and a Location header (see section 14.30).



[.* can .*]	
However, the 303 (See Other) response can be used to direct the user agent to retrieve a cacheable resource.



[.* MUST .*]	
 POST requests MUST obey the message transmission requirements set out in section 8.2.



[.* SHOULD .*]	
If the Request-URI refers to an already existing resource, the enclosed entity SHOULD be considered as a modified version of the one residing on the origin server.



[.* can .*]	
If the Request-URI does not point to an existing resource, and that URI is capable of being defined as a new resource by the requesting user agent, the origin server can create the resource with that URI.



[.* MUST .*]	
If a new resource is created, the origin server MUST inform the user agent via the 201 (Created) response.



[.* either .* or .*]	[.* SHOULD .*]	
If an existing resource is modified, either the 200 (OK) or 204 (No Content) response codes SHOULD be sent to indicate successful completion of the request.



[.* could .*]	[.* SHOULD .*]	
If the resource could not be created or modified with the Request-URI, an appropriate error response SHOULD be given that reflects the nature of the problem.



[.* MUST .*]	
The recipient of the entity MUST NOT ignore any Content-* (e.g, Content-Range) headers that it does not understand or implement and MUST return a 501 (Not Implemented) response in such cases.



[.* SHOULD .*]	
 If the request passes through a cache and the Request-URI identifies one or more currently cached entities, those entries SHOULD be treated as stale.



[.* might .*]	
That resource might be a data-accepting process, a gateway to some other protocol, or a separate entity that accepts annotations.



[.* MUST .*]	
In contrast, the URI in a PUT request identifies the entity enclosed with the request -- the user agent knows what URI is intended and the server MUST NOT attempt to apply the request to some other resource.



[.* MUST .*]	[.* MAY .*]	
If the server desires that the request be applied to a different URI, it MUST send a 301 (Moved Permanently) response; the user agent MAY then make its own decision regarding whether or not to redirect the request.



[.* MAY .*]	
 A single resource MAY be identified by many different URIs.



[.* might .*]	
For example, an article might have a URI for identifying "the current version" which is separate from the URI identifying each particular version.



[.* might .*]	
In this case, a PUT request on a general URI might result in several other URIs being defined by the origin server.



[.* MUST .*]	
 PUT requests MUST obey the message transmission requirements set out in section 8.2.



[.* SHOULD .*]	
 Unless otherwise specified for a particular entity-header, the entity-headers in the PUT request SHOULD be applied to the resource created or modified by the PUT.



[.* MAY .*]	
This method MAY be overridden by human intervention (or other means) on the origin server.



[.* SHOULD .*]	
However, the server SHOULD NOT indicate success unless, at the time the response is given, it intends to delete the resource or move it to an inaccessible location.



[.* SHOULD .*]	
 A successful response SHOULD be 200 (OK) if the response includes an entity describing the status, 202 (Accepted) if the action has not yet been enacted, or 204 (No Content) if the action has been enacted but the response does not include an entity.



[.* SHOULD .*]	
 If the request passes through a cache and the Request-URI identifies one or more currently cached entities, those entries SHOULD be treated as stale.



[.* SHOULD .*]	
The final recipient of the request SHOULD reflect the message received back to the client as the entity-body of a 200 (OK) response.



[.* either .* or .*]	
The final recipient is either the origin server or the first proxy or gateway to receive a Max-Forwards value of zero (0) in the request (see section 14.31).



[.* MUST .*]	
A TRACE request MUST NOT include an entity.



[.* SHOULD .*]	
 If the request is valid, the response SHOULD contain the entire request message in the entity-body, with a Content-Type of "message/http".



[.* MUST .*]	
Responses to this method MUST NOT be cached.



[.* can .*]	
 This specification reserves the method name CONNECT for use with a proxy that can dynamically switch to being a tunnel (e.g, SSL tunneling [44]).



[.* can .*]	
 Each Status-Code is described below, including a description of which method(s) it can follow and any metainformation required in the response.



[.* MUST .*]	
Since HTTP/1.0 did not define any 1xx status codes, servers MUST NOT send a 1xx response to an HTTP/1.0 client except under experimental conditions.



[.* MUST .*]	
 A client MUST be prepared to accept one or more 1xx status responses prior to a regular response, even if the client does not expect a 100 (Continue) status message.



[.* MAY .*]	
Unexpected 1xx status responses MAY be ignored by a user agent.



[.* MUST .*]	
 Proxies MUST forward 1xx responses, unless the connection between the proxy and its client has been closed, or unless the proxy itself requested the generation of the 1xx response.



[.* SHOULD .*]	
 The client SHOULD continue with its request.



[.* SHOULD .*]	
The client SHOULD continue by sending the remainder of the request or, if the request has already been completed, ignore this response.



[.* MUST .*]	
The server MUST send a final response after the request has been completed.



[.* SHOULD .*]	
 The protocol SHOULD be switched only when it is advantageous to do so.



[.* might .*]	
For example, switching to a newer version of HTTP is advantageous over older versions, and switching to a real-time, synchronous protocol might be advantageous when delivering resources that use such features.



[.* can .*]	
The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field.



[.* can .*]	[.* SHOULD .*]	
The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate.



[.* MUST .*]	
The origin server MUST create the resource before returning the 201 status code.



[.* SHOULD .*]	
If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead.



[.* MAY .*]	
 A 201 response MAY contain an ETag response header field indicating the current value of the entity tag for the requested variant just created, see section 14.19.



[.* might .*]	
The request might or might not eventually be acted upon, as it might be disallowed when processing actually takes place.



[.* can .*]	[.* either .* or .*]	[.* SHOULD .*]	
The entity returned with this response SHOULD include an indication of the request's current status and either a pointer to a status monitor or some estimate of when the user can expect the request to be fulfilled.



[.* MAY .*]	
The set presented MAY be a subset or superset of the original version.



[.* might .*]	
For example, including local annotation information about the resource might result in a superset of the metainformation known by the origin server.



[.* would .*]	
Use of this response code is not required and is only appropriate when the response would otherwise be 200 (OK).



[.* might .*]	[.* has .* to .*]	[.* need .* to .*]	
 The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation.



[.* SHOULD .*]	[.* MAY .*]	
The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant.



[.* SHOULD .*]	
 If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent.



[.* SHOULD .*]	
This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view.



[.* MUST .*]	
 The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields.



[.* has .* to .*]	[.* SHOULD .*]	
 The server has fulfilled the request and the user agent SHOULD reset the document view which caused the request to be sent.



[.* can .*]	
This response is primarily intended to allow input for actions to take place via user input, followed by a clearing of the form in which the input is given so that the user can easily initiate another input action.



[.* MUST .*]	
The response MUST NOT include an entity.



[.* have .* to .*]	[.* MUST .*]	[.* MAY .*]	
The request MUST have included a Range header field (section 14.35) indicating the desired range, and MAY have included an If-Range header field (section 14.27) to make the request conditional.



[.* MUST .*]	
 The response MUST include the following header fields:



[.* MUST .*]	
If a Content-Length header field is present in the response, its value MUST match the actual number of OCTETs transmitted in the message-body.



[.* would .*]	[.* might .*]	[.* have .* to .*]	
 - ETag and/or Content-Location, if the header would have been sent in a 200 response to the same request - Expires, Cache-Control, and/or Vary, if the field-value might differ from that sent in any previous response for the same variant



[.* SHOULD .*]	
 If the 206 response is the result of an If-Range request that used a strong cache validator (see section 13.3.3), the response SHOULD NOT include other entity-headers.



[.* MUST .*]	
If the response is the result of an If-Range request that used a weak validator, the response MUST NOT include other entity-headers; this prevents inconsistencies between cached entity-bodies and updated headers.



[.* would .*]	[.* have .* to .*]	[.* MUST .*]	
Otherwise, the response MUST include all of the entity-headers that would have been returned with a 200 (OK) response to the same request.



[.* MUST .*]	
 A cache MUST NOT combine a 206 response with other previously cached content if the ETag or Last-Modified headers do not match exactly, see 13.5.4.



[.* MUST .*]	
 A cache that does not support the Range and Content-Range headers MUST NOT cache 206 (Partial) responses.



[.* MAY .*]	
The action required MAY be carried out by the user agent without interaction with the user if and only if the method used in the second request is GET or HEAD.



[.* SHOULD .*]	
A client SHOULD detect infinite redirection loops, since such loops generate network traffic for each redirection.



[.* should .*]	[.* might .*]	
Content developers should be aware that there might be clients that implement such a fixed limitation.



[.* can .*]	
 The requested resource corresponds to any one of a set of representations, each with its own specific location, and agent- driven negotiation information (section 12) is being provided so that the user (or user agent) can select a preferred representation and redirect its request to that location.



[.* can .*]	[.* SHOULD .*]	
 Unless it was a HEAD request, the response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate.



[.* MAY .*]	
Depending upon the format and the capabilities of the user agent, selection of the most appropriate choice MAY be performed automatically.



[.* SHOULD .*]	[.* MAY .*]	
 If the server has a preferred choice of representation, it SHOULD include the specific URI for that representation in the Location field; user agents MAY use the Location field value for automatic redirection.



[.* has .* to .*]	[.* SHOULD .*]	
 The requested resource has been assigned a new permanent URI and any future references to this resource SHOULD use one of the returned URIs.



[.* ought .* to .*]	
Clients with link editing capabilities ought to automatically re-link references to the Request-URI to one or more of the new references returned by the server, where possible.



[.* SHOULD .*]	
 The new permanent URI SHOULD be given by the Location field in the response.



[.* SHOULD .*]	
Unless the request method was HEAD, the entity of the response SHOULD contain a short hypertext note with a hyperlink to the new URI(s).



[.* can .*]	[.* might .*]	[.* MUST .*]	
 If the 301 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT automatically redirect the request unless it can be confirmed by the user, since this might change the conditions under which the request was issued.



[.* might .*]	[.* SHOULD .*]	
Since the redirection might be altered on occasion, the client SHOULD continue to use the Request-URI for future requests.



[.* SHOULD .*]	
 The temporary URI SHOULD be given by the Location field in the response.



[.* SHOULD .*]	
Unless the request method was HEAD, the entity of the response SHOULD contain a short hypertext note with a hyperlink to the new URI(s).



[.* can .*]	[.* might .*]	[.* MUST .*]	
If the 302 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT automatically redirect the request unless it can be confirmed by the user, since this might change the conditions under which the request was issued.



[.* have .* to .*]	
The status codes 303 and 307 have been added for servers that wish to make unambiguously clear which kind of reaction is expected of the client.



[.* can .*]	[.* SHOULD .*]	
 The response to the request can be found under a different URI and SHOULD be retrieved using a GET method on that resource.



[.* might .*]	[.* MUST .*]	
The 303 response MUST NOT be cached, but the response to the second (redirected) request might be cacheable.



[.* SHOULD .*]	
 The different URI SHOULD be given by the Location field in the response.



[.* SHOULD .*]	
Unless the request method was HEAD, the entity of the response SHOULD contain a short hypertext note with a hyperlink to the new URI(s).



[.* may .*]	
When interoperability with such clients is a concern, the 302 status code may be used instead, since most user agents react to a 302 response as described here for 303.



[.* SHOULD .*]	
 If the client has performed a conditional GET request and access is allowed, but the document has not been modified, the server SHOULD respond with this status code.



[.* MUST .*]	
The 304 response MUST NOT contain a message-body, and thus is always terminated by the first empty line after the header fields.



[.* MUST .*]	
 The response MUST include the following header fields:



[.* would .*]	[.* have .* to .*]	
 - ETag and/or Content-Location, if the header would have been sent in a 200 response to the same request



[.* might .*]	
 - Expires, Cache-Control, and/or Vary, if the field-value might differ from that sent in any previous response for the same variant



[.* SHOULD .*]	
 If the conditional GET used a strong cache validator (see section 13.3.3), the response SHOULD NOT include other entity-headers.



[.* MUST .*]	
Otherwise (i.e., the conditional GET used a weak validator), the response MUST NOT include other entity-headers; this prevents inconsistencies between cached entity-bodies and updated headers.



[.* MUST .*]	
 If a 304 response indicates an entity not currently cached, then the cache MUST disregard the response and repeat the request without the conditional.



[.* MUST .*]	
 If a cache uses a received 304 response to update a cache entry, the cache MUST update the entry to reflect any new field values given in the response.



[.* MUST .*]	
 The requested resource MUST be accessed through the proxy given by the Location field.



[.* MUST .*]	
305 responses MUST only be generated by origin servers.



[.* SHOULD .*]	[.* MAY .*]	
Since the redirection MAY be altered on occasion, the client SHOULD continue to use the Request-URI for future requests.



[.* SHOULD .*]	
 The temporary URI SHOULD be given by the Location field in the response.



[.* SHOULD .*]	
Unless the request method was HEAD, the entity of the response SHOULD contain a short hypertext note with a hyperlink to the new URI(s) , since many pre-HTTP/1.1 user agents do not understand the 307 status.



[.* SHOULD .*]	
Therefore, the note SHOULD contain the information necessary for a user to repeat the original request on the new URI.



[.* can .*]	[.* might .*]	[.* MUST .*]	
 If the 307 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT automatically redirect the request unless it can be confirmed by the user, since this might change the conditions under which the request was issued.



[.* SHOULD .*]	
Except when responding to a HEAD request, the server SHOULD include an entity containing an explanation of the error situation, and whether it is a temporary or permanent condition.



[.* SHOULD .*]	
User agents SHOULD display any included entity to the user.



[.* SHOULD .*]	
 If the client is sending data, a server implementation using TCP SHOULD be careful to ensure that the client acknowledges receipt of the packet(s) containing the response, before the server closes the input connection.



[.* can .*]	[.* may .*]	
If the client continues sending data to the server after the close, the server's TCP stack will send a reset packet to the client, which may erase the client's unacknowledged input buffers before they can be read and interpreted by the HTTP application.



[.* could .*]	
 The request could not be understood by the server due to malformed syntax.



[.* SHOULD .*]	
The client SHOULD NOT repeat the request without modifications.



[.* MUST .*]	
The response MUST include a WWW-Authenticate header field (section 14.47) containing a challenge applicable to the requested resource.



[.* MAY .*]	
The client MAY repeat the request with a suitable Authorization header field (section 14.8).



[.* might .*]	[.* SHOULD .*]	
If the 401 response contains the same challenge as the prior response, and the user agent has already attempted authentication at least once, then the user SHOULD be presented the entity that was given in the response, since that entity might include relevant diagnostic information.



[.* SHOULD .*]	
Authorization will not help and the request SHOULD NOT be repeated.



[.* SHOULD .*]	
If the request method was not HEAD and the server wishes to make public why the request has not been fulfilled, it SHOULD describe the reason for the refusal in the entity.



[.* can .*]	
If the server does not wish to make this information available to the client, the status code 404 (Not Found) can be used instead.



[.* SHOULD .*]	
The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address.



[.* MUST .*]	
The response MUST include an Allow header containing a list of valid methods for the requested resource.



[.* have .* to .*]	
 The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to the accept headers sent in the request.



[.* can .*]	[.* SHOULD .*]	
 Unless it was a HEAD request, the response SHOULD include an entity containing a list of available entity characteristics and location(s) from which the user or user agent can choose the one most appropriate.



[.* MAY .*]	
Depending upon the format and the capabilities of the user agent, selection of the most appropriate choice MAY be performed automatically.



[.* may .*]	
In some cases, this may even be preferable to sending a 406 response.



[.* could .*]	[.* SHOULD .*]	
 If the response could be unacceptable, a user agent SHOULD temporarily stop receipt of more data and query the user for a decision on further actions.



[.* must .*]	
 This code is similar to 401 (Unauthorized), but indicates that the client must first authenticate itself with the proxy.



[.* MUST .*]	
The proxy MUST return a Proxy-Authenticate header field (section 14.33) containing a challenge applicable to the proxy for the requested resource.



[.* MAY .*]	
The client MAY repeat the request with a suitable Proxy-Authorization header field (section 14.34).



[.* MAY .*]	
The client MAY repeat the request without modifications at any later time.



[.* could .*]	
 The request could not be completed due to a conflict with the current state of the resource.



[.* might .*]	
This code is only allowed in situations where it is expected that the user might be able to resolve the conflict and resubmit the request.



[.* SHOULD .*]	
The response body SHOULD include enough information for the user to recognize the source of the conflict.



[.* would .*]	[.* might .*]	
Ideally, the response entity would include enough information for the user or user agent to fix the problem; however, that might not be possible and is not required.



[.* might .*]	
For example, if versioning were being used and the entity being PUT included changes to a resource which conflict with those made by an earlier (third-party) request, the server might use the 409 response to indicate that it can't complete the request.



[.* would .*]	
In this case, the response entity would likely contain a list of the differences between the two versions in a format defined by the response Content-Type.



[.* SHOULD .*]	
Clients with link editing capabilities SHOULD delete references to the Request-URI after user approval.



[.* has .* to .*]	[.* SHOULD .*]	
If the server does not know, or has no facility to determine, whether or not the condition is permanent, the status code 404 (Not Found) SHOULD be used instead.



[.* MAY .*]	
The client MAY repeat the request if it adds a valid Content-Length header field containing the length of the message-body in the request message.



[.* MAY .*]	
The server MAY close the connection to prevent the client from continuing the request.



[.* SHOULD .*]	[.* MAY .*]	
 If the condition is temporary, the server SHOULD include a Retry- After header field to indicate that it is temporary and after what time the client MAY try again.



[.* has .* to .*]	
This rare condition is only likely to occur when a client has improperly converted a POST request to a GET request with long query information, when the client has descended into a URI "black hole" of redirection (e.g,, a redirected URI prefix that points to a suffix of itself), or when the server is under attack by a client attempting to exploit security holes present in some servers using fixed-length buffers for reading or manipulating the Request-URI.



[.* SHOULD .*]	
 A server SHOULD return a response with this status code if a request included a Range request-header field (section 14.35), and none of the range-specifier values in this field overlap the current extent of the selected resource, and the request did not include an If-Range request-header field.



[.* SHOULD .*]	
 When this status code is returned for a byte-range request, the response SHOULD include a Content-Range entity-header field specifying the current length of the selected resource (see section 14.16).



[.* MUST .*]	
This response MUST NOT use the multipart/byteranges content- type.



[.* could .*]	
 The expectation given in an Expect request-header field (see section 14.20) could not be met by this server, or, if the server is a proxy, the server has unambiguous evidence that the request could not be met by the next-hop server.



[.* SHOULD .*]	
Except when responding to a HEAD request, the server SHOULD include an entity containing an explanation of the error situation, and whether it is a temporary or permanent condition.



[.* SHOULD .*]	
User agents SHOULD display any included entity to the user.



[.* MAY .*]	
If known, the length of the delay MAY be indicated in a Retry-After header.



[.* would .*]	[.* SHOULD .*]	
If no Retry-After is given, the client SHOULD handle the response as it would for a 500 response.



[.* must .*]	
 Note: The existence of the 503 status code does not imply that a server must use it when becoming overloaded.



[.* may .*]	
Some servers may wish to simply refuse the connection.



[.* SHOULD .*]	
The response SHOULD contain an entity describing why that version is not supported and what other protocols are supported by that server.



[.* can .*]	
 HTTP provides several OPTIONAL challenge-response authentication mechanisms which can be used by a server to challenge a client request and by a client to provide authentication information.



[.* may .*]	
 Note: This is not called "format negotiation" because the alternate representations may be of the same media type, but use different capabilities of that type, be in different languages, etc.



[.* MAY .*]	
Any response containing an entity-body MAY be subject to negotiation, including error responses.



[.* may .*]	
These two kinds of negotiation are orthogonal and thus may be used separately or in combination.



[.* can .*]	
Selection is based on the available representations of the response (the dimensions over which it can vary; e.g, language, content-coding, etc.)



[.* MAY .*]	
In order to improve the server's guess, the user agent MAY include request header fields (Accept, Accept-Language, Accept-Encoding, etc.)



[.* would .*]	[.* might .*]	
It is impossible for the server to accurately determine what might be "best" for any given user, since that would require complete knowledge of both the capabilities of the user agent and the intended use for the response (e.g,, does the user want to view it on screen or print it on paper?



[.* can .*]	
Having the user agent describe its capabilities in every request can be both very inefficient (given that only a small percentage of responses have multiple representations) and a potential violation of the user's privacy.



[.* may .*]	
It may limit a public cache's ability to use the same response for multiple user's requests.



[.* MAY .*]	
However, an origin server is not limited to these dimensions and MAY vary the response based on any aspect of the request, including information outside the request-header fields or within extension header fields not defined by this specification.



[.* can .*]	
 The Vary  header field can be used to express the parameters the server uses to select a representation that is subject to server- driven negotiation.



[.* may .*]	
Selection from among the representations may be performed automatically (if the user agent is capable of doing so) or manually by the user selecting from a generated (possibly hypertext) menu.



[.* would .*]	
 Agent-driven negotiation is advantageous when the response would vary over commonly-used dimensions (such as type, language, or encoding), when the origin server is unable to determine a user agent's capabilities from examining the request, and generally when public caches are used to distribute server load and reduce network usage.



[.* would .*]	[.* has .* to .*]	
 Transparent negotiation has the advantage of distributing the negotiation work that would otherwise be required of the origin server and also removing the second request delay of agent-driven negotiation when the cache is able to correctly guess the right response.



[.* could .*]	
 This specification does not define any mechanism for transparent negotiation, though it also does not prevent any such mechanism from being developed as an extension that could be used within HTTP/1.1.



[.* can .*]	
 HTTP is typically used for distributed information systems, where performance can be improved by the use of response caches.



[.* would .*]	
 Caching would be useless if it did not significantly improve performance.



[.* need .* to .*]	
The goal of caching in HTTP/1.1 is to eliminate the need to send requests in many cases, and to eliminate the need to send full responses in many other cases.



[.* may .*]	[.* might .*]	
However, because non-transparent operation may confuse non-expert users, and might be incompatible with certain server applications (such as those for ordering merchandise), the protocol requires that transparency be relaxed



[.* must .*]	
 A basic principle is that it must be possible for the clients to detect any potential relaxation of semantic transparency.



[.* might .*]	
 Note: The server, cache, or client implementor might be faced with design decisions not explicitly discussed in this specification.



[.* might .*]	
If a decision might affect semantic transparency, the implementor ought to err on the side of maintaining transparency unless a careful and complete analysis shows significant benefits in breaking transparency.



[.* MUST .*]	
 A correct cache MUST respond to a request with the most up-to-date response held by the cache that is appropriate to the request (see sections 13.2.5, 13.2.6, and 13.12) which meets one of the following conditions:



[.* would .*]	
It has been checked for equivalence with what the origin server would have returned by revalidating the response with the origin server (section 13.3); 2.



[.* MAY .*]	
 If a stored response is not "fresh enough" by the most restrictive freshness requirement of both the client and the origin server, in carefully considered circumstances the cache MAY still return the response with the appropriate Warning header (see section 13.1.5 and 14.46), unless such a response is prohibited (e.g,, by a "no-store" cache-directive, or by a "no-cache" cache-request-directive; see section 14.9).



[.* can .*]	[.* SHOULD .*]	[.* MUST .*]	
 If the cache can not communicate with the origin server, then a correct cache SHOULD respond as above if the response can be correctly served from the cache; if not it MUST return an error or warning indicating that there was a communication failure.



[.* would .*]	[.* SHOULD .*]	
 If a cache receives a response (either an entire response, or a 304 (Not Modified) response) that it would normally forward to the requesting client, and the received response is no longer fresh, the cache SHOULD forward it to the requesting client without adding a new Warning (but without removing any existing Warning headers).



[.* might .*]	[.* SHOULD .*]	
A cache SHOULD NOT attempt to revalidate a response simply because that response became stale in transit; this might lead to an infinite loop.



[.* MAY .*]	
A user agent that receives a stale response without a Warning MAY display a warning indication to the user.



[.* neither .* nor .*]	[.* MUST .*]	
 Whenever a cache returns a response that is neither first-hand nor "fresh enough" (in the sense of condition 2 in section 13.1.1), it MUST attach a warning to that effect, using a Warning general-header.



[.* MAY .*]	
 Warnings MAY be used for other purposes, both cache-related and otherwise.



[.* MUST .*]	
The first digit indicates whether the Warning MUST or MUST NOT be deleted from a stored cache entry after a successful revalidation: 1xx  Warnings that describe the freshness or revalidation status of the response, and so MUST be deleted after a successful revalidation.



[.* MAY .*]	
1XX warn-codes MAY be generated by a cache only when validating a cached entry.



[.* MUST .*]	
It MUST NOT be generated by clients.



[.* MUST .*]	
 2xx  Warnings that describe some aspect of the entity body or entity headers that is not rectified by a revalidation (for example, a lossy compression of the entity bodies) and which MUST NOT be deleted after a successful revalidation.



[.* MAY .*]	
The text MAY be in any appropriate natural language (perhaps based on the client's Accept headers), and include an OPTIONAL indication of what character set is used.



[.* MAY .*]	
 Multiple warnings MAY be attached to a response (either by the origin server or by a cache), including multiple warnings with the same code number.



[.* might .*]	
For example, a server might provide the same warning with texts in both English and Basque.



[.* might .*]	
 When multiple warnings are attached to a response, it might not be practical or reasonable to display all of them to the user.



[.* might .*]	[.* need .* to .*]	
In some cases, a server or client might need to provide explicit directives to the HTTP caches.



[.* either .* or .*]	
 The Cache-Control header allows a client or server to transmit a variety of directives in either requests or responses.



[.* might .*]	
For example, the user agent might allow the user to specify that cached entities (even explicitly stale ones) are never validated.



[.* might .*]	
Or the user agent might habitually add "Cache- Control: max-stale=3600" to every request.



[.* either .* or .*]	[.* SHOULD .*]	[.* MAY .*]	
The user agent SHOULD NOT default to either non-transparent behavior, or behavior that results in abnormally ineffective caching, but MAY be explicitly configured to do so by an explicit action of the user.



[.* might .*]	[.* has .* to .*]	[.* SHOULD .*]	
 If the user has overridden the basic caching mechanisms, the user agent SHOULD explicitly indicate to the user whenever this results in the display of information that might not meet the server's transparency requirements (in particular, if the displayed entity is known to be stale).



[.* could .*]	
The indication need not be a dialog box; it could be an icon (for example, a picture of a rotting fish) or some other indicator.



[.* would .*]	[.* has .* to .*]	[.* SHOULD .*]	
 If the user has overridden the caching mechanisms in a way that would abnormally reduce the effectiveness of caches, the user agent SHOULD continually indicate this state to the user (for example, by a display of a picture of currency in flames) so that the user does not inadvertently consume excess resources or suffer from excessive latency.



[.* MAY .*]	
 In some cases, the operator of a cache MAY choose to configure it to return stale responses even when not requested by clients.



[.* may .*]	[.* ought .* to .*]	
This decision ought not be made lightly, but may be necessary for reasons of availability or performance, especially when the cache is poorly connected to the origin server.



[.* might .*]	[.* MUST .*]	
Whenever a cache returns a stale response, it MUST mark it as such (using a Warning header) enabling the client software to alert the user that there might be a potential problem.



[.* SHOULD .*]	
For this reason, a cache SHOULD NOT return a stale response if the client explicitly requests a first-hand or fresh one, unless it is impossible to comply for technical or policy reasons.



[.* might .*]	[.* need .* to .*]	
 While the origin server (and to a lesser extent, intermediate caches, by their contribution to the age of a response) are the primary source of expiration information, in some cases the client might need to control a cache's decision about whether to return a cached response without validating it.



[.* MAY .*]	
 A client's request MAY specify the maximum age it is willing to accept of an unvalidated response; specifying a value of zero forces the cache(s) to revalidate all responses.



[.* MAY .*]	
A client MAY also specify the minimum time remaining before a response expires.



[.* MAY .*]	
 A client MAY also specify that it will accept stale responses, up to some maximum amount of staleness.



[.* might .*]	
This loosens the constraints on the caches, and so might violate the origin server's specified constraints on semantic transparency, but might be necessary to support disconnected operation, or high availability in the face of poor connectivity.



[.* can .*]	
 HTTP caching works best when caches can entirely avoid making requests to the origin server.



[.* MAY .*]	
The primary mechanism for avoiding requests is for an origin server to provide an explicit expiration time in the future, indicating that a response MAY be used to satisfy subsequent requests.



[.* can .*]	
In other words, a cache can return a fresh response without first contacting the server.



[.* MAY .*]	
 If an origin server wishes to force a semantically transparent cache to validate every request, it MAY assign an explicit expiration time in the past.



[.* SHOULD .*]	
This means that the response is always stale, and so the cache SHOULD validate it before using it for subsequent requests.



[.* SHOULD .*]	
 If an origin server wishes to force any HTTP/1.1 cache, no matter how it is configured, to validate every request, it SHOULD use the "must- revalidate" cache-control directive (see section 14.9).



[.* either .* or .*]	
 Servers specify explicit expiration times using either the Expires header, or the max-age directive of the Cache-Control header.



[.* might .*]	[.* ought .* to .*]	
Since heuristic expiration times might compromise semantic transparency, they ought to used cautiously, and we encourage origin servers to provide explicit expiration times as much as possible.



[.* SHOULD .*]	
Hosts that use HTTP, but especially hosts running origin servers and caches, SHOULD use NTP [28] or some similar protocol to synchronize their clocks to a globally accurate time standard.



[.* can .*]	
 A response's age can be calculated in two entirely independent ways:



[.* can .*]	[.* have .* to .*]	
 Given that we have two independent ways to compute the age of a response when it is received, we can combine these as



[.* either .* or .*]	
 and as long as we have either nearly synchronized clocks or all- HTTP/1.1 paths, one gets a reliable (conservative) result.



[.* might .*]	
 Because of network-imposed delays, some significant interval might pass between the time that a server generates a response and the time it is received at the next outbound cache or client.



[.* could .*]	
If uncorrected, this delay could result in improperly low ages.



[.* must .*]	[.* can .*]	[.* have .* to .*]	
 Because the request that resulted in the returned Age value must have been initiated prior to that Age value's generation, we can correct for delays imposed by the network by recording the time at which the request was initiated.



[.* MUST .*]	
Then, when an Age value is received, it MUST be interpreted relative to the time the request was initiated, not the time that the response was received.



[.* MUST .*]	
When a response is generated from a cache entry, the cache MUST include a single Age header field in the response with a value equal to the cache entry's current_age.



[.* need .* to .*]	
 In order to decide whether a response is fresh or stale, we need to compare its freshness lifetime to its age.



[.* can .*]	
In the discussion below, the values can be represented in any form appropriate for arithmetic operations.



[.* MAY .*]	
 If none of Expires, Cache-Control: max-age, or Cache-Control: s- maxage (see section 14.9.3) appears in the response, and the response does not include other restrictions on caching, the cache MAY compute a freshness lifetime using a heuristic.



[.* MUST .*]	
The cache MUST attach Warning 113 to any response whose age is more than 24 hours if such warning has not already been added.



[.* SHOULD .*]	
 Also, if the response does have a Last-Modified time, the heuristic expiration value SHOULD be no more than some fraction of the interval since that time.



[.* might .*]	
A typical setting of this fraction might be 10%.



[.* MAY .*]	
 If a client performing a retrieval receives a non-first-hand response for a request that was already fresh in its own cache, and the Date header in its existing cache entry is newer than the Date on the new response, then the client MAY ignore the response.



[.* MAY .*]	
If so, it MAY retry the request with a "Cache-Control: max-age=0" directive (see section 14.9), to force a check with the origin server.



[.* MUST .*]	
 If a cache has two fresh responses for the same representation with different validators, it MUST use the one with the more recent Date header.



[.* might .*]	
This situation might arise because the cache is pooling responses from other caches, or because a client has asked for a reload or a revalidation of an apparently fresh cache entry.



[.* might .*]	
 Because a client might be receiving responses via multiple paths, so that some responses flow through one set of caches and other responses flow through a different set of caches, a client might receive responses in an order different from that in which the origin server sent them.



[.* would .*]	
We would like the client to use the most recently generated response, even if older responses are still apparently fresh.



[.* can .*]	
 Neither the entity tag nor the expiration value can impose an ordering on responses, since it is possible that a later response intentionally carries an earlier expiration time.



[.* SHOULD .*]	
 When a client tries to revalidate a cache entry, and the response it receives contains a Date header that appears to be older than the one for the existing entry, then the client SHOULD repeat the request unconditionally, and include



[.* MAY .*]	
If the Date values are equal, then the client MAY use either response (or MAY, if it is being extremely prudent, request a new response).



[.* MUST .*]	
Servers MUST NOT depend on clients being able to choose deterministically between responses generated during the same second, if their expiration times overlap.



[.* would .*]	[.* has .* to .*]	
 When a cache has a stale entry that it would like to use as a response to a client's request, it first has to check with the origin server (or possibly an intermediate cache with a fresh response) to see if its cached entry is still usable.



[.* have .* to .*]	
Since we do not want to have to pay the overhead of retransmitting the full response if the cached entry is good, and we do not want to pay the overhead of an extra round trip if the cached entry is invalid, the HTTP/1.1 protocol supports the use of conditional methods.



[.* either .* or .*]	
That is, it is possible to request either that a method be performed if and only if a validator matches or if and only if no validators match.



[.* may .*]	
Note: a response that lacks a validator may still be cached, and served from cache until it expires, unless this is explicitly prohibited by a cache-control directive.



[.* might .*]	
This might allow more reliable validation in situations where it is inconvenient to store modification dates, where the one-second resolution of HTTP date values is not sufficient, or where the origin server wishes to avoid certain paradoxes that might arise from the use of modification dates.



[.* would .*]	
 Since both origin servers and caches will compare two validators to decide if they represent the same or different entities, one normally would expect that if the entity (the entity-body or any entity- headers) changes in any way, then the associated validator would change as well.



[.* might .*]	
 However, there might be cases when a server prefers to change the validator only on semantically significant changes, and not when insignificant aspects of the entity change.



[.* can .*]	
One can think of a strong validator as one that changes whenever the bits of an entity changes, while a weak value changes whenever the meaning of an entity changes.



[.* can .*]	
Alternatively, one can think of a strong validator as part of an identifier for a specific entity, while a weak validator is part of an identifier for a set of semantically equivalent entities.



[.* could .*]	[.* might .*]	
An entity's modification time, if represented with one-second resolution, could be a weak validator, since it is possible that the resource might be modified twice during a single second.



[.* either .* or .*]	
 A "use" of a validator is either when a client generates a request and includes the validator in a validating header field, or when a server compares two validators.



[.* might .*]	
However, only a strong validator is usable for a sub-range retrieval, since otherwise the client might end up with an internally inconsistent entity.



[.* either .* or .*]	[.* MAY .*]	
 Clients MAY issue simple (non-subrange) GET requests with either weak validators or strong validators.



[.* MUST .*]	
Clients MUST NOT use weak validators in other forms of request.



[.* MUST .*]	
 - The strong comparison function: in order to be considered equal, both validators MUST be identical in every way, and both MUST NOT be weak.



[.* MUST .*]	[.* MAY .*]	
 - The weak comparison function: in order to be considered equal, both validators MUST be identical in every way, but either or both of them MAY be tagged as "weak" without affecting the result.



[.* would .*]	[.* have .* to .*]	[.* had .* to .*]	
 This method relies on the fact that if two different responses were sent by the origin server during the same second, but both had the same Last-Modified time, then at least one of those responses would have a Date value equal to its Last-Modified time.



[.* MAY .*]	
An implementation MAY use a value larger than 60 seconds, if it is believed that 60 seconds is too short.



[.* MAY .*]	
 If a client wishes to perform a sub-range retrieval on a value for which it has only a Last-Modified time and no opaque validator, it MAY do this only if the Last-Modified time is strong in the sense described here.



[.* MUST .*]	
 A cache or origin server receiving a conditional request, other than a full-body GET request, MUST use the strong comparison function to evaluate the condition.



[.* SHOULD .*]	
 - SHOULD send an entity tag validator unless it is not feasible to generate one.



[.* MAY .*]	
 - MAY send a weak entity tag instead of a strong entity tag, if performance considerations support the use of weak entity tags, or if it is unfeasible to send a strong entity tag.



[.* could .*]	[.* would .*]	[.* SHOULD .*]	
 - SHOULD send a Last-Modified value if it is feasible to send one, unless the risk of a breakdown in semantic transparency that could result from using this date in an If-Modified-Since header would lead to serious problems.



[.* MUST .*]	
 In order to be legal, a strong entity tag MUST change whenever the associated entity value changes in any way.



[.* SHOULD .*]	
A weak entity tag SHOULD change whenever the associated entity changes in a semantically significant way.



[.* must .*]	
 Note: in order to provide semantically transparent caching, an origin server must avoid reusing a specific strong entity tag value for two different entities, or reusing a specific weak entity tag value for two semantically different entities.



[.* might .*]	
Cache entries might persist for arbitrarily long periods, regardless of expiration times, so it might be inappropriate to expect that a cache will never again attempt to validate an entry using a validator that it obtained at some point in the past.



[.* MUST .*]	
 - If an entity tag has been provided by the origin server, MUST use that entity tag in any cache-conditional request (using If- Match or If-None-Match).



[.* SHOULD .*]	
 - If only a Last-Modified value has been provided by the origin server, SHOULD use that value in non-subrange cache-conditional requests (using If-Modified-Since).



[.* MAY .*]	
- If only a Last-Modified value has been provided by an HTTP/1.0 origin server, MAY use that value in subrange cache-conditional requests (using If-Unmodified-Since:).



[.* SHOULD .*]	
The user agent SHOULD provide a way to disable this, in case of difficulty.



[.* SHOULD .*]	
 - If both an entity tag and a Last-Modified value have been provided by the origin server, SHOULD use both validators in cache-conditional requests.



[.* MUST .*]	
 An HTTP/1.1 origin server, upon receiving a conditional request that includes both a Last-Modified date (e.g,, in an If-Modified-Since or If-Unmodified-Since header field) and one or more entity tags (e.g,, in an If-Match, If-None-Match, or If-Range header field) as cache validators, MUST NOT return a response status of 304 (Not Modified) unless doing so is consistent with all of the conditional header fields in the request.



[.* MUST .*]	
 An HTTP/1.1 caching proxy, upon receiving a conditional request that includes both a Last-Modified date and one or more entity tags as cache validators, MUST NOT return a locally cached response to the client unless that cached response is consistent with all of the conditional header fields in the request.



[.* should .*]	
 Note: The general principle behind these rules is that HTTP/1.1 servers and clients should transmit as much non-redundant information as is available in their responses and requests.



[.* should .*]	
Generally, last-modified values received or used by these systems will support transparent and efficient caching, and so HTTP/1.1 origin servers should provide Last-Modified values.



[.* could .*]	[.* should .*]	
In those rare cases where the use of a Last-Modified value as a validator by an HTTP/1.0 system could result in a serious problem, then HTTP/1.1 origin servers should not provide one.



[.* can .*]	[.* would .*]	
 The principle behind entity tags is that only the service author knows the semantics of a resource well enough to select an appropriate cache validation mechanism, and the specification of any validator comparison function more complex than byte-equality would open up a can of worms.



[.* MAY .*]	
 Unless specifically constrained by a cache-control (section 14.9) directive, a caching system MAY always store a successful response (see section 13.8) as a cache entry, MAY return it without validation if it is fresh, and MAY return it after successful validation.



[.* neither .* nor .*]	[.* MAY .*]	
If there is neither a cache validator nor an explicit expiration time associated with a response, we do not expect it to be cached, but certain caches MAY violate this expectation (for example, when little or no network connectivity is available).



[.* can .*]	
A client can usually detect that such a response was taken from a cache by comparing the Date header to the current time.



[.* might .*]	
 However, in some cases it might be inappropriate for a cache to retain an entity, or to return it in response to a subsequent request.



[.* might .*]	
This might be because absolute semantic transparency is deemed necessary by the service author, or because of security or privacy considerations.



[.* can .*]	
Certain cache-control directives are therefore provided so that the server can indicate that certain resource entities, or portions thereof, are not to be cached regardless of other considerations.



[.* MAY .*]	
 A response received with a status code of 200, 203, 206, 300, 301 or 410 MAY be stored by a cache and used in reply to a subsequent request, subject to the expiration mechanism, unless a cache-control directive prohibits caching.



[.* MUST .*]	
However, a cache that does not support the Range and Content-Range headers MUST NOT cache 206 (Partial Content) responses.



[.* MUST .*]	
 A response received with any other status code (e.g, status codes 302 and 307) MUST NOT be returned in a reply to a subsequent request unless there are cache-control directives or another header(s) that explicitly allow it.



[.* might .*]	
However, if the cache holds a cache entry based on a previous response, it might have to combine parts of a new response with what is held in the cache entry.



[.* MUST .*]	
End-to-end headers in responses MUST be stored as part of a cache entry and MUST be transmitted in any response formed from a cache entry.



[.* MUST .*]	
 Other hop-by-hop headers MUST be listed in a Connection header, (section 14.10) to be introduced into HTTP/1.1 (or later).



[.* SHOULD .*]	
A transparent proxy SHOULD NOT modify an end-to-end header unless the definition of that header requires or specifically allows that.



[.* MUST .*]	
A transparent proxy MUST NOT modify any of the following fields in a request or response, and it MUST NOT add any of these fields if not already present:



[.* MUST .*]	
 A transparent proxy MUST NOT modify any of the following fields in a response:



[.* MAY .*]	
 but it MAY add any of these fields if not already present.



[.* MUST .*]	
If an Expires header is added, it MUST be given a field-value identical to that of the Date header in that response.



[.* MUST .*]	
 A  proxy MUST NOT modify or add any of the following fields in a message that contains the no-transform cache-control directive, or in any request:



[.* MUST .*]	[.* MAY .*]	
 A non-transparent proxy MAY modify or add these fields to a message that does not include no-transform, but if it does so, it MUST add a Warning 214 (Transformation applied) if one does not already appear in the message (see section 14.46).



[.* might .*]	
 Warning: unnecessary modification of end-to-end headers might cause authentication failures if stronger authentication mechanisms are introduced in later versions of HTTP.



[.* MAY .*]	
Such authentication mechanisms MAY rely on the values of header fields not listed here.



[.* MUST .*]	[.* MAY .*]	
A transparent proxy MUST preserve the entity-length (section 7.2.2) of the entity-body, although it MAY change the transfer-length (section 4.4).



[.* MAY .*]	
If the status code is 206 (Partial Content) and the ETag or Last-Modified headers match exactly, the cache MAY combine the contents stored in the cache entry with the new contents received in the response and use the result as the entity-body of this outgoing response, (see 13.5.4).



[.* MUST .*]	
 - any stored Warning headers with warn-code 1xx (see section 14.46) MUST be deleted from the cache entry and the forwarded response.



[.* MUST .*]	
 - any stored Warning headers with warn-code 2xx MUST be retained in the cache entry and the forwarded response.



[.* MUST .*]	
 - any end-to-end headers provided in the 304 or 206 response MUST replace the corresponding headers from the cache entry.



[.* MUST .*]	
 Unless the cache decides to remove the cache entry, it MUST also replace the end-to-end headers stored with the cache entry with corresponding headers received in the incoming response, except for Warning headers as described immediately above.



[.* MUST .*]	
If a header field- name in the incoming response matches more than one header in the cache entry, all such old headers MUST be replaced.



[.* might .*]	
 Note: this rule allows an origin server to use a 304 (Not Modified) or a 206 (Partial Content) response to update any header associated with a previous response for the same entity or sub- ranges thereof, although it might not always be meaningful or correct to do so.



[.* might .*]	[.* either .* or .*]	
 A response might transfer only a subrange of the bytes of an entity- body, either because the request included one or more Range specifications, or because a connection was broken prematurely.



[.* might .*]	
After several such transfers, a cache might have received several ranges of the same entity-body.



[.* MAY .*]	
 If a cache has a stored non-empty set of subranges for an entity, and an incoming response transfers another subrange, the cache MAY combine the new subrange with the existing set if both the following conditions are met:



[.* either .* or .*]	[.* MUST .*]	
 If either requirement is not met, the cache MUST use only the most recent partial response (based on the Date values transmitted with every response, and using the incoming response if these values are equal or missing), and MUST discard the other partial information.



[.* can .*]	
 Use of server-driven content negotiation (section 12.1), as indicated by the presence of a Vary header field in a response, alters the conditions and procedure by which a cache can use the response for subsequent requests.



[.* SHOULD .*]	
 A server SHOULD use the Vary header field to inform a cache of what request-header fields were used to select among multiple representations of a cacheable response subject to server-driven negotiation.



[.* MUST .*]	
 When the cache receives a subsequent request whose Request-URI specifies one or more cache entries including a Vary header field, the cache MUST NOT use such a cache entry to construct a response to the new request unless all of the selecting request-headers present in the new request match the corresponding stored request-headers in the original request.



[.* can .*]	
 The selecting request-headers from two requests are defined to match if and only if the selecting request-headers in the first request can be transformed to the selecting request-headers in the second request by adding or removing linear white space (LWS) at places where this is allowed by the corresponding BNF, and/or combining multiple message-header fields with the same field name following the rules about message headers in section 4.2.



[.* can .*]	
 A Vary header field-value of "*" always fails to match and subsequent requests on that resource can only be properly interpreted by the origin server.



[.* MUST .*]	
 If the selecting request header fields for the cached entry do not match the selecting request header fields of the new request, then the cache MUST NOT use a cached entry to satisfy the request unless it first relays the new request to the origin server in a conditional request and the server responds with 304 (Not Modified), including an entity tag or Content-Location that indicates the entity to be used.



[.* SHOULD .*]	
 If an entity tag was assigned to a cached representation, the forwarded request SHOULD be conditional and include the entity tags in an If-None-Match header field from all its cache entries for the resource.



[.* can .*]	
This conveys to the server the set of entities currently held by the cache, so that if any one of these entities matches the requested entity, the server can use the ETag header field in its 304 (Not Modified) response to tell the cache which entry is appropriate.



[.* SHOULD .*]	[.* MUST .*]	
If the entity-tag of the new response matches that of an existing entry, the new response SHOULD be used to update the header fields of the existing entry, and the result MUST be returned to the client.



[.* would .*]	[.* SHOULD .*]	
 If any of the existing cache entries contains only partial content for the associated entity, its entity-tag SHOULD NOT be included in the If-None-Match header field unless the request is for a range that would be fully satisfied by that entry.



[.* SHOULD .*]	
 If a cache receives a successful response whose Content-Location field matches that of an existing cache entry for the same Request- ]URI, whose entity-tag differs from that of the existing entry, and whose Date is more recent than that of the existing entry, the existing entry SHOULD NOT be returned in response to future requests and SHOULD be deleted from the cache.



[.* SHOULD .*]	
Accessibility in this case SHOULD be enforced by appropriate security mechanisms.



[.* MAY .*]	
 A cache that receives an incomplete response (for example, with fewer bytes of data than specified in a Content-Length header) MAY store the response.



[.* MUST .*]	
However, the cache MUST treat this as a partial response.



[.* might .*]	[.* MAY .*]	
Partial responses MAY be combined as described in section 13.5.4; the result might be a full response or might still be partial.



[.* MUST .*]	
A cache MUST NOT return a partial response to a client without explicitly marking it as such, using the 206 (Partial Content) status code.



[.* MUST .*]	
A cache MUST NOT return a partial response using a status code of 200 (OK).



[.* either .* or .*]	[.* MAY .*]	
 If a cache receives a 5xx response while attempting to revalidate an entry, it MAY either forward this response to the requesting client, or act as if the server failed to respond.



[.* MAY .*]	
In the latter case, it MAY return a previously received response unless the cached entry includes the "must-revalidate" cache-control directive (see section 14.9).



[.* would .*]	[.* have .* to .*]	[.* SHOULD .*]	
 Unless the origin server explicitly prohibits the caching of their responses, the application of GET and HEAD methods to any resources SHOULD NOT have side effects that would lead to erroneous behavior if these responses are taken from a cache.



[.* have .* to .*]	[.* MAY .*]	
They MAY still have side effects, but a cache is not required to consider such side effects in its caching decisions.



[.* MUST .*]	
in the rel_path part) to perform operations with significant side effects, caches MUST NOT treat responses to such URIs as fresh unless the server provides an explicit expiration time.



[.* SHOULD .*]	
This specifically means that responses from HTTP/1.0 servers for such URIs SHOULD NOT be taken from a cache.



[.* might .*]	
 The effect of certain methods performed on a resource at the origin server might cause one or more existing cache entries to become non- transparently invalid.



[.* would .*]	[.* might .*]	
That is, although they might continue to be "fresh," they do not accurately reflect what the origin server would return for a new request on that resource.



[.* might .*]	
For example, the request that caused the change at the origin server might not have gone through the proxy where a cache entry is stored.



[.* can .*]	[.* either .* or .*]	[.* need .* to .*]	
 In this section, the phrase "invalidate an entity" means that the cache will either remove all instances of that entity from its storage, or will mark these as "invalid" and in need of a mandatory revalidation before they can be returned in response to a subsequent request.



[.* MUST .*]	
 Some HTTP methods MUST cause a cache to invalidate an entity.



[.* either .* or .*]	
This is either the entity referred to by the Request-URI, or by the Location or Content-Location headers (if present).



[.* MUST .*]	
 In order to prevent denial of service attacks, an invalidation based on the URI in a Location or Content-Location header MUST only be performed if the host part is the same as in the Request-URI.



[.* SHOULD .*]	
 A cache that passes through requests for methods it does not understand SHOULD invalidate any entities referred to by the Request-URI.



[.* might .*]	[.* MUST .*]	
 All methods that might be expected to cause modifications to the origin server's resources MUST be written through to the origin server.



[.* having .* to .*]	[.* MUST .*]	
A cache MUST NOT reply to such a request from a client before having transmitted the request to the inbound server, and having received a corresponding response from the inbound server.



[.* SHOULD .*]	
 If a new cacheable (see sections 14.9.2, 13.2.5, 13.2.6 and 13.8) response is received from a resource while any existing responses for the same resource are cached, the cache SHOULD use the new response to reply to the current request.



[.* would .*]	[.* have .* to .*]	[.* MAY .*]	
It MAY insert it into cache storage and MAY, if it meets all other requirements, use it to respond to any future requests that would previously have caused the old response to be returned.



[.* can .*]	[.* have .* to .*]	
 User agents often have history mechanisms, such as "Back" buttons and history lists, which can be used to redisplay an entity retrieved earlier in a session.



[.* SHOULD .*]	
In particular history mechanisms SHOULD NOT try to show a semantically transparent view of the current state of a resource.



[.* has .* to .*]	[.* SHOULD .*]	
If the entity is still in storage, a history mechanism SHOULD display it even if the entity has expired, unless the user has specifically configured the agent to refresh expired history documents.



[.* might .*]	
 This is not to be construed to prohibit the history mechanism from telling the user that a view might be stale.



[.* would .*]	
 Note: if history list mechanisms unnecessarily prevent users from viewing stale resources, this will tend to force service authors to avoid using HTTP expiration controls and cache controls when they would otherwise like to.



[.* may .*]	
Service authors may consider it important that users not be presented with error messages or warning messages when they use navigation controls (such as BACK) to view previously fetched resources.



[.* may .*]	[.* ought .* to .*]	
Even though sometimes such resources ought not to cached, or ought to expire quickly, user interface considerations may force service authors to resort to other means of preventing caching (e.g, "once-only" URLs) in order not to suffer the effects of improperly functioning history mechanisms.



[.* either .* or .*]	
For entity-header fields, both sender and recipient refer to either the client or the server, depending on who sends and who receives the entity.



[.* can .*]	
 The Accept request-header field can be used to specify certain media types which are acceptable for the response.



[.* can .*]	
Accept headers can be used to indicate that the request is specifically limited to a small set of desired types, as in the case of a request for an in-line image.



[.* MAY .*]	
The media-range MAY include media type parameters that are applicable to that range.



[.* MAY .*]	
 Each media-range MAY be followed by one or more accept-params, beginning with the "q" parameter for indicating a relative quality factor.



[.* SHOULD .*]	
 SHOULD be interpreted as "I prefer audio/basic, but send me any audio type if it is the best available after an 80% mark-down in quality."



[.* SHOULD .*]	
If an Accept header field is present, and if the server cannot send a response which is acceptable according to the combined Accept field value, then the server SHOULD send a 406 (not acceptable) response.



[.* would .*]	
 Verbally, this would be interpreted as "text/html and text/x-c are the preferred media types, but if they do not exist, then send the text/x-dvi entity, and if that does not exist, send the text/plain entity."



[.* can .*]	
 Media ranges can be overridden by more specific media ranges or specific media types.



[.* would .*]	
 would cause the following values to be associated:



[.* might .*]	
 Note: A user agent might be provided with a default set of quality values for certain media ranges.



[.* can .*]	
 The Accept-Charset request-header field can be used to indicate what character sets are acceptable for the response.



[.* MAY .*]	
Each charset MAY be given an associated quality value which represents the user's preference for that charset.



[.* SHOULD .*]	
If an Accept-Charset header is present, and if the server cannot send a response which is acceptable according to the Accept-Charset header, then the server SHOULD send an error response with the 406 (not acceptable) status code, though the sending of an unacceptable response is also allowed.



[.* SHOULD .*]	
 If an Accept-Encoding field is present in a request, and if the server cannot send a response which is acceptable according to the Accept-Encoding header, then the server SHOULD send an error response with the 406 (Not Acceptable) status code.



[.* MAY .*]	
 If no Accept-Encoding field is present in a request, the server MAY assume that the client will accept any content coding.



[.* has .* to .*]	[.* SHOULD .*]	
In this case, if "identity" is one of the available content-codings, then the server SHOULD use the "identity" content-coding, unless it has additional information that a different content-coding is meaningful to the client.



[.* might .*]	
The server might also make this decision based on information about the particular user-agent or client.



[.* MAY .*]	
 Each language-range MAY be given an associated quality value which represents an estimate of the user's preference for the languages specified by that range.



[.* would .*]	
 would mean: "I prefer Danish, but will accept British English and other types of English."



[.* SHOULD .*]	
If no Accept-Language header is present in the request, the server SHOULD assume that all languages are equally acceptable.



[.* might .*]	
 It might be contrary to the privacy expectations of the user to send an Accept-Language header with the complete linguistic preferences of the user in every request.



[.* MUST .*]	
If the choice is not made available, then the Accept-Language header field MUST NOT be given in the request.



[.* should .*]	
 Note: When making the choice of linguistic preference available to the user, we remind implementors of  the fact that users are not familiar with the details of language matching as described above, and should provide appropriate guidance.



[.* might .*]	
As an example, users might assume that on selecting "en-gb", they will be served any kind of English document if British English is not available.



[.* might .*]	
A user agent might suggest in such a case to add "en" to get the best matching behavior.



[.* MAY .*]	
 Origin servers that accept byte-range requests MAY send



[.* MAY .*]	
Clients MAY generate byte-range requests without having received this header for the resource involved.



[.* MAY .*]	
 Servers that do not accept any kind of range request for a resource MAY send



[.* can .*]	[.* MUST .*]	
 If a cache receives a value larger than the largest positive integer it can represent, or if any of its age calculations overflows, it MUST transmit an Age header with a value of 2147483648 (2^31).



[.* MUST .*]	
An HTTP/1.1 server that includes a cache MUST include an Age header field in every response generated from its own cache.



[.* SHOULD .*]	
Caches SHOULD use an arithmetic type of at least 31 bits of range.



[.* MUST .*]	
An Allow header field MUST be present in a 405 (Method Not Allowed) response.



[.* SHOULD .*]	
However, the indications given by the Allow header field value SHOULD be followed.



[.* MAY .*]	
 The Allow header field MAY be provided with a PUT request to recommend the methods to be supported by the new or modified resource.



[.* SHOULD .*]	
The server is not required to support these methods and SHOULD include an Allow header in the response giving the actual supported methods.



[.* might .*]	[.* MUST .*]	
A proxy MUST NOT modify the Allow header field even if it does not understand all the methods specified, since the user agent might have other means of communicating with the origin server.



[.* SHOULD .*]	
If a request is authenticated and a realm specified, the same credentials SHOULD be valid for all other requests within this realm (assuming that the authentication scheme itself does not require otherwise, such as credentials that vary according to a challenge value or using synchronized clocks).



[.* MUST .*]	
 When a shared cache (see section 13.7) receives a request containing an Authorization field, it MUST NOT return the corresponding response as a reply to any other request, unless one of the following specific exceptions holds:



[.* MAY .*]	
If the response includes the "s-maxage" cache-control directive, the cache MAY use that response in replying to a subsequent request.



[.* has .* to .*]	[.* MUST .*]	
But (if the specified maximum age has passed) a proxy cache MUST first revalidate it with the origin server, using the request-headers from the new request to allow the origin server to authenticate the new request.



[.* MUST .*]	
If the response includes "s- maxage=0", the proxy MUST always revalidate it before re-using it.



[.* MAY .*]	
If the response includes the "must-revalidate" cache-control directive, the cache MAY use that response in replying to a subsequent request.



[.* MUST .*]	
But if the response is stale, all caches MUST first revalidate it with the origin server, using the request-headers from the new request to allow the origin server to authenticate the new request.



[.* MAY .*]	
If the response includes the "public" cache-control directive, it MAY be returned in reply to any subsequent request.



[.* MUST .*]	
 The Cache-Control general-header field is used to specify directives that MUST be obeyed by all caching mechanisms along the request/response chain.



[.* might .*]	
 Note that HTTP/1.0 caches might not implement Cache-Control and might only implement Pragma: no-cache (see section 14.32).



[.* might .*]	[.* MUST .*]	
 Cache directives MUST be passed through by a proxy or gateway application, regardless of their significance to that application, since the directives might be applicable to all recipients along the request/response chain.



[.* might .*]	
This mechanism supports extensibility; implementations of future versions of the HTTP protocol might apply these directives to header fields not defined in HTTP/1.1.



[.* can .*]	
 The cache-control directives can be broken down into these general categories:



[.* may .*]	
 - Restrictions on what are cacheable; these may only be imposed by the origin server.



[.* may .*]	[.* either .* or .*]	
 - Restrictions on what may be stored by a cache; these may be imposed by either the origin server or the user agent.



[.* may .*]	[.* either .* or .*]	
 - Modifications of the basic expiration mechanism; these may be imposed by either the origin server or the user agent.



[.* may .*]	
 - Controls over cache revalidation and reload; these may only be imposed by a user agent.



[.* would .*]	[.* MAY .*]	
 public Indicates that the response MAY be cached by any cache, even if it would normally be non-cacheable or cacheable only within a non- shared cache.



[.* MUST .*]	
 private Indicates that all or part of the response message is intended for a single user and MUST NOT be cached by a shared cache.



[.* MAY .*]	
A private (non-shared) cache MAY cache the response.



[.* may .*]	
 Note: This usage of the word private only controls where the response may be cached, and cannot ensure the privacy of the message content.



[.* MUST .*]	
 no-cache If the no-cache directive does not specify a field-name, then a cache MUST NOT use the response to satisfy a subsequent request without successful revalidation with the origin server.



[.* have .* to .*]	
This allows an origin server to prevent caching even by caches that have been configured to return stale responses to client requests.



[.* MAY .*]	
 If the no-cache directive does specify one or more field-names, then a cache MAY use the response to satisfy a subsequent request, subject to any other restrictions on caching.



[.* MUST .*]	
However, the specified field-name(s) MUST NOT be sent in the response to a subsequent request without successful revalidation with the origin server.



[.* either .* or .*]	[.* MAY .*]	
The no-store directive applies to the entire message, and MAY be sent either in a response or in a request.



[.* either .* or .*]	[.* MUST .*]	
If sent in a request, a cache MUST NOT store any part of either this request or any response to it.



[.* either .* or .*]	[.* MUST .*]	
If sent in a response, a cache MUST NOT store any part of either this response or the request that elicited it.



[.* MUST .*]	
"MUST NOT store" in this context means that the cache MUST NOT intentionally store the information in non-volatile storage, and MUST make a best-effort attempt to remove the information from volatile storage as promptly as possible after forwarding it.



[.* might .*]	
 Even when this directive is associated with a response, users might explicitly store such a response outside of the caching system (e.g,, with a "Save As" dialog).



[.* MAY .*]	
History buffers MAY store such responses as part of their normal operation.



[.* might .*]	
While the use of this directive might improve privacy in some cases, we caution that it is NOT in any way a reliable or sufficient mechanism for ensuring privacy.



[.* might .*]	
In particular, malicious or compromised caches might not recognize or obey this directive, and communications networks might be vulnerable to eavesdropping.



[.* MAY .*]	
 The expiration time of an entity MAY be specified by the origin server using the Expires header (see section 14.21).



[.* MAY .*]	
Alternatively, it MAY be specified using the max-age directive in a response.



[.* might .*]	
This might be useful if certain HTTP/1.0 caches improperly calculate ages or expiration times, perhaps due to desynchronized clocks.



[.* SHOULD .*]	
If an HTTP/1.1 cache receives such a response, and the response does not include a Cache-Control header field, it SHOULD consider the response to be non-cacheable in order to retain compatibility with HTTP/1.0 servers.



[.* might .*]	
 Note: An origin server might wish to use a relatively new HTTP cache control feature, such as the "private" directive, on a network including older caches that do not understand that feature.



[.* need .* to .*]	
The origin server will need to combine the new feature with an Expires field whose value is less than or equal to the Date value.



[.* either .* or .*]	
s-maxage If a response includes an s-maxage directive, then for a shared cache (but not for a private cache), the maximum age specified by this directive overrides the maximum age specified by either the max-age directive or the Expires header.



[.* must .*]	
The s-maxage directive also implies the semantics of the proxy-revalidate directive (see section 14.9.4), i.e., that the shared cache must not use the entry after it becomes stale to respond to a subsequent request without first revalidating it with the origin server.



[.* MAY .*]	
An origin server wishing to use a cache-control directive that restricts, but does not prevent, caching by an HTTP/1.1-compliant cache MAY exploit the requirement that the max-age directive overrides the Expires header, and the fact that pre-HTTP/1.1-compliant caches do not observe the max-age directive.



[.* MAY .*]	
These directives MAY be specified on a request:



[.* either .* or .*]	[.* MUST .*]	
 If a cache returns a stale response, either because of a max-stale directive on a request, or because the cache is configured to override the expiration time of a response, the cache MUST attach a Warning header to the stale response, using Warning 110 (Response is stale).



[.* MAY .*]	
A cache MAY be configured to return stale responses without validation, but only if this does not conflict with any "MUST"-level requirements concerning cache validation (e.g,, a "must-revalidate" cache-control directive).



[.* might .*]	[.* need .* to .*]	
 Sometimes a user agent might want or need to insist that a cache revalidate its cache entry with the origin server (and not just with the next cache along the path to the origin server), or to reload its cache entry from the origin server.



[.* might .*]	[.* either .* or .*]	
End-to-end revalidation might be necessary if either the cache or the origin server has overestimated the expiration time of the cached response.



[.* may .*]	
End-to-end reload may be necessary if the cache entry has become corrupted for some reason.



[.* may .*]	[.* either .* or .*]	
 End-to-end revalidation may be requested either when the client does not have its own local cached copy, in which case we call it "unspecified end-to-end revalidation", or when the client does have a local cached copy, in which case we call it "specific end-to-end revalidation."



[.* can .*]	
 The client can specify these three kinds of action using Cache- Control request directives:



[.* MUST .*]	
Field names MUST NOT be included with the no-cache directive in a request.



[.* MUST .*]	
The server MUST NOT use a cached copy when responding to such a request.



[.* might .*]	
 max-age When an intermediate cache is forced, by means of a max-age=0 directive, to revalidate its own cache entry, and the client has supplied its own validator in the request, the supplied validator might differ from the validator currently stored with the cache entry.



[.* MAY .*]	
In this case, the cache MAY use either validator in making its own request without affecting semantic transparency.



[.* might .*]	
 However, the choice of validator might affect performance.



[.* can .*]	
If the server replies with 304 (Not Modified), then the cache can return its now validated copy to the client with a 200 (OK) response.



[.* can .*]	
If the server replies with a new entity and cache validator, however, the intermediate cache can compare the returned validator with the one provided in the client's request, using the strong comparison function.



[.* SHOULD .*]	
 If a request includes the no-cache directive, it SHOULD NOT include min-fresh, max-stale, or max-age.



[.* may .*]	[.* has .* to .*]	
 only-if-cached In some cases, such as times of extremely poor network connectivity, a client may want a cache to return only those responses that it currently has stored, and not to reload or revalidate with the origin server.



[.* may .*]	
To do this, the client may include the only-if-cached directive in a request.



[.* either .* or .*]	[.* SHOULD .*]	
If it receives this directive, a cache SHOULD either respond using a cached entry that is consistent with the other constraints of the request, or respond with a 504 (Gateway Timeout) status.



[.* MAY .*]	
However, if a group of caches is being operated as a unified system with good internal connectivity, such a request MAY be forwarded within that group of caches.



[.* has .* to .*]	[.* MAY .*]	
 must-revalidate Because a cache MAY be configured to ignore a server's specified expiration time, and because a client request MAY include a max- stale directive (which has a similar effect), the protocol also includes a mechanism for the origin server to require revalidation of a cache entry on any subsequent use.



[.* MUST .*]	
When the must-revalidate directive is present in a response received by a cache, that cache MUST NOT use the entry after it becomes stale to respond to a subsequent request without first revalidating it with the origin server.



[.* MUST .*]	
(I.e., the cache MUST do an end-to-end revalidation every time, if, based solely on the origin server's Expires or max-age value, the cached response is stale.)



[.* MUST .*]	
In all circumstances an HTTP/1.1 cache MUST obey the must-revalidate directive; in particular, if the cache cannot reach the origin server for any reason, it MUST generate a 504 (Gateway Timeout) response.



[.* could .*]	[.* SHOULD .*]	
 Servers SHOULD send the must-revalidate directive if and only if failure to revalidate a request on the entity could result in incorrect operation, such as a silently unexecuted financial transaction.



[.* MUST .*]	
Recipients MUST NOT take any automated action that violates this directive, and MUST NOT automatically provide an unvalidated copy of the entity if revalidation fails.



[.* MUST .*]	[.* MAY .*]	
 Although this is not recommended, user agents operating under severe connectivity constraints MAY violate this directive but, if so, MUST explicitly warn the user that an unvalidated response has been provided.



[.* SHOULD .*]	[.* MUST .*]	
The warning MUST be provided on each unvalidated access, and SHOULD require explicit user confirmation.



[.* has .* to .*]	
 proxy-revalidate The proxy-revalidate directive has the same meaning as the must- revalidate directive, except that it does not apply to non-shared user agent caches.



[.* can .*]	[.* has .* to .*]	
It can be used on a response to an authenticated request to permit the user's cache to store and later return the response without needing to revalidate it (since it has already been authenticated once by that user), while still requiring proxies that service many users to revalidate each time (in order to make sure that each user has been authenticated).



[.* need .* to .*]	
Note that such authenticated responses also need the public cache control directive in order to allow them to be cached at all.



[.* have .* to .*]	
 no-transform Implementors of intermediate caches (proxies) have found it useful to convert the media type of certain entity bodies.



[.* MUST .*]	
 Therefore, if a message includes the no-transform directive, an intermediate cache or proxy MUST NOT change those headers that are listed in section 13.5.2 as being subject to the no-transform directive.



[.* MUST .*]	
This implies that the cache or proxy MUST NOT change any aspect of the entity-body that is specified by these headers, including the value of the entity-body itself.



[.* can .*]	
 The Cache-Control header field can be extended through the use of one or more cache-extension tokens, each with an optional assigned value.



[.* MAY .*]	
Informational extensions (those which do not require a change in cache behavior) MAY be added without changing the semantics of other directives.



[.* can .*]	
In this way, extensions to the cache-control directives can be made without requiring changes to the base protocol.



[.* may .*]	
We define this new directive to mean that, in addition to any non-shared cache, any cache which is shared only by members of the community named within its value may cache the response.



[.* could .*]	
An origin server wishing to allow the UCI community to use an otherwise private response in their shared cache(s) could do so by including



[.* MUST .*]	
Unrecognized cache-directives MUST be ignored; it is assumed that any cache-directive likely to be unrecognized by an HTTP/1.1 cache will be combined with standard directives (or the response's default cacheability) such that the cache behavior will remain minimally correct even if the cache does not understand the extension(s).



[.* MUST .*]	
 The Connection general-header field allows the sender to specify options that are desired for that particular connection and MUST NOT be communicated by proxies over further connections.



[.* MUST .*]	
 HTTP/1.1 proxies MUST parse the Connection header field before a message is forwarded and, for each connection-token in this field, remove any header field(s) from the message with the same name as the connection-token.



[.* may .*]	
Connection options are signaled by the presence of a connection-token in the Connection header field, not by any corresponding additional header field(s), since the additional header field may not be sent if there are no parameters associated with that connection option.



[.* MUST .*]	
 Message headers listed in the Connection header MUST NOT include end-to-end headers, such as Cache-Control.



[.* either .* or .*]	[.* SHOULD .*]	
 in either the request or the response header fields indicates that the connection SHOULD NOT be considered `persistent' (section 8.1) after the current request/response is complete.



[.* MUST .*]	
 HTTP/1.1 applications that do not support persistent connections MUST include the "close" connection option in every message.



[.* must .*]	[.* have .* to .*]	
When present, its value indicates what additional content codings have been applied to the entity-body, and thus what decoding mechanisms must be applied in order to obtain the media-type referenced by the Content-Type header field.



[.* MAY .*]	
However, a non-transparent proxy MAY modify the content-coding if the new coding is known to be acceptable to the recipient, unless the "no-transform" cache-control directive is present in the message.



[.* MUST .*]	
 If the content-coding of an entity is not "identity", then the response MUST include a Content-Encoding entity-header (section 14.11) that lists the non-identity content-coding(s) used.



[.* SHOULD .*]	
 If the content-coding of an entity in a request message is not acceptable to the origin server, the server SHOULD respond with a status code of 415 (Unsupported Media Type).



[.* have .* to .*]	[.* MUST .*]	
 If multiple encodings have been applied to an entity, the content codings MUST be listed in the order in which they were applied.



[.* MAY .*]	
Additional information about the encoding parameters MAY be provided by other entity-header fields not defined by this specification.



[.* might .*]	
Note that this might not be equivalent to all the languages used within the entity-body.



[.* might .*]	
This might mean that the sender does not consider it to be specific to any natural language, or that the sender does not know for which language it is intended.



[.* MAY .*]	
 Multiple languages MAY be listed for content that is intended for multiple audiences.



[.* would .*]	
For example, a rendition of the "Treaty of Waitangi," presented simultaneously in the original Maori and English versions, would call for



[.* would .*]	
An example would be a beginner's language primer, such as "A First Lesson in Latin," which is clearly intended to be used by an English-literate audience.



[.* would .*]	
In this case, the Content-Language would properly only include "en".



[.* MAY .*]	
 Content-Language MAY be applied to any media type -- it is not limited to textual documents.



[.* would .*]	
 The Content-Length entity-header field indicates the size of the entity-body, in decimal number of OCTETs, sent to the recipient or, in the case of the HEAD method, the size of the entity-body that would have been sent had the request been a GET.



[.* SHOULD .*]	
 Applications SHOULD use this field to indicate the transfer-length of the message-body, unless this is prohibited by the rules in section 4.4.



[.* can .*]	[.* SHOULD .*]	
In HTTP, it SHOULD be sent whenever the message's length can be determined prior to being transferred, unless this is prohibited by the rules in section 4.4.



[.* MAY .*]	
 The Content-Location entity-header field MAY be used to supply the resource location for the entity enclosed in the message when that entity is accessible from a location separate from the requested resource's URI.



[.* might .*]	[.* SHOULD .*]	
A server SHOULD provide a Content-Location for the variant corresponding to the response entity; especially in the case where a resource has multiple entities associated with it, and those entities actually have separate locations by which they might be individually accessed, the server SHOULD provide a Content-Location for the particular variant which is returned.



[.* MAY .*]	
Future requests MAY specify the Content-Location URI as the request- URI if the desire is to identify the source of that particular entity.



[.* can .*]	
 A cache cannot assume that an entity with a Content-Location different from the URI used to retrieve it can be used to respond to later requests on that Content-Location URI.



[.* can .*]	
However, the Content- Location can be used to differentiate between multiple entities retrieved from a single requested resource, as described in section 13.6.



[.* MAY .*]	
 The Content-MD5 header field MAY be generated by an origin server or client to function as an integrity check of the entity-body.



[.* would .*]	[.* MUST .*]	[.* MAY .*]	
Only origin servers or clients MAY generate the Content-MD5 header field; proxies and gateways MUST NOT generate it, as this would defeat its value as an end-to-end integrity check.



[.* MAY .*]	
Any recipient of the entity- body, including gateways and proxies, MAY check that the digest value in this header field matches that of the entity-body as received.



[.* has .* to .*]	
 The MD5 digest is computed based on the content of the entity-body, including any content-coding that has been applied, but not including any transfer-encoding applied to the message-body.



[.* MUST .*]	
If the message is received with a transfer-encoding, that encoding MUST be removed prior to checking the Content-MD5 value against the received entity.



[.* would .*]	
 This has the result that the digest is computed on the octets of the entity-body exactly as, and in the order that, they would be sent if no transfer-encoding were being applied.



[.* MAY .*]	
The entity-body for composite types MAY contain many body-parts, each with its own MIME and HTTP headers (including Content-MD5, Content-Transfer-Encoding, and Content-Encoding headers).



[.* MUST .*]	
 Conversion of all line breaks to CRLF MUST NOT be done before computing or checking the digest: the line break convention used in the text actually transmitted MUST be left unaltered when computing the digest.



[.* should .*]	
 The Content-Range entity-header is sent with a partial entity-body to specify where in the full entity-body the partial body should be applied.



[.* SHOULD .*]	
 The header SHOULD indicate the total length of the full entity-body, unless this length is unknown or difficult to determine.



[.* MUST .*]	
 Unlike byte-ranges-specifier values (see section 14.35.1), a byte- range-resp-spec MUST only specify one range, and MUST contain absolute byte positions for both the first and last byte of the range.



[.* MUST .*]	
The recipient of an invalid byte-content-range- spec MUST ignore it and any content transferred along with it.



[.* SHOULD .*]	
 A server sending a response with status code 416 (Requested range not satisfiable) SHOULD include a Content-Range field with a byte-range- resp-spec of "*".



[.* MUST .*]	
A response with status code 206 (Partial Content) MUST NOT include a Content-Range field with a byte-range- resp-spec of "*".



[.* MUST .*]	
 A response to a request for a single range MUST NOT be sent using the multipart/byteranges media type.



[.* MAY .*]	
A response to a request for multiple ranges, whose result is a single range, MAY be sent as a multipart/byteranges media type with one part.



[.* MUST .*]	
A client that cannot decode a multipart/byteranges message MUST NOT ask for multiple byte-ranges in a single request.



[.* SHOULD .*]	
 When a client requests multiple byte-ranges in one request, the server SHOULD return them in the order that they appeared in the request.



[.* SHOULD .*]	
If the server ignores a byte-range-spec because it is syntactically invalid, the server SHOULD treat the request as if the invalid Range header field did not exist.



[.* SHOULD .*]	
 If the server receives a request (other than one including an If- Range request-header field) with an unsatisfiable Range request- header field (that is, all of whose byte-range-spec values have a first-byte-pos value greater than the current length of the selected resource), it SHOULD return a response code of 416 (Requested range not satisfiable) (section 10.4.17).



[.* would .*]	
 The Content-Type entity-header field indicates the media type of the entity-body sent to the recipient or, in the case of the HEAD method, the media type that would have been sent had the request been a GET.



[.* MUST .*]	
The field value is an HTTP-date, as described in section 3.3.1; it MUST be sent in RFC 1123 [8]-date format.



[.* MUST .*]	
 Origin servers MUST include a Date header field in all responses, except in these cases: 1.



[.* MAY .*]	
If the response status code is 100 (Continue) or 101 (Switching Protocols), the response MAY include a Date header field, at the server's option.



[.* can .*]	[.* MUST .*]	
If the server does not have a clock that can provide a reasonable approximation of the current time, its responses MUST NOT include a Date header field.



[.* MUST .*]	
In this case, the rules in section 14.18.1 MUST be followed.



[.* MUST .*]	
 A received message that does not have a Date header field MUST be assigned one by the recipient if the message will be cached by that recipient or gatewayed via a protocol which requires a Date.



[.* MUST .*]	
An HTTP implementation without a clock MUST NOT cache responses without revalidating them on every use.



[.* SHOULD .*]	
An HTTP cache, especially a shared cache, SHOULD use a mechanism, such as NTP [28], to synchronize its clock with a reliable external standard.



[.* SHOULD .*]	
 Clients SHOULD only send a Date header field in messages that include an entity-body, as in the case of the PUT and POST requests, and even then it is optional.



[.* MUST .*]	
A client without a clock MUST NOT send a Date header field in a request.



[.* SHOULD .*]	
 The HTTP-date sent in a Date header SHOULD NOT represent a date and time subsequent to the generation of the message.



[.* SHOULD .*]	
It SHOULD represent the best available approximation of the date and time of message generation, unless the implementation has no means of generating a reasonably accurate date and time.



[.* can .*]	
In practice, the date can be generated at any time during the message origination without affecting its semantic value.



[.* might .*]	
 Some origin server implementations might not have a clock available.



[.* MUST .*]	
An origin server without a clock MUST NOT assign Expires or Last- Modified values to a response, unless these values were associated with the resource by a system or user with a reliable clock.



[.* MAY .*]	
It MAY assign an Expires value that is known, at or before server configuration time, to be in the past (this allows "pre-expiration" of responses without storing separate Expires values for each resource).



[.* MAY .*]	
The entity tag MAY be used for comparison with other entities from the same resource (see section 13.3.3).



[.* MUST .*]	
 A server that does not understand or is unable to comply with any of the expectation values in the Expect field of a request MUST respond with appropriate error status.



[.* MUST .*]	
The server MUST respond with a 417 (Expectation Failed) status if any of the expectations cannot be met or, if there are other problems with the request, some other 4xx status.



[.* MUST .*]	
If a server receives a request containing an Expect field that includes an expectation-extension that it does not support, it MUST respond with a 417 (Expectation Failed) status.



[.* MUST .*]	
The Expect mechanism is hop-by-hop: that is, an HTTP/1.1 proxy MUST return a 417 (Expectation Failed) status if it receives a request with an expectation that it cannot meet.



[.* MUST .*]	
However, the Expect request-header itself is end-to-end; it MUST be forwarded if the request is forwarded.



[.* may .*]	
A stale cache entry may not normally be returned by a cache (either a proxy cache or a user agent cache) unless it is first validated with the origin server (or with an intermediate cache that has a fresh copy of the entity).



[.* MUST .*]	
 The format is an absolute date and time as defined by HTTP-date in section 3.3.1; it MUST be in RFC 1123 date format:



[.* MUST .*]	
 HTTP/1.1 clients and caches MUST treat other invalid date formats, especially including the value "0", as in the past (i.e., "already expired").



[.* SHOULD .*]	
HTTP/1.1 servers SHOULD NOT send Expires dates more than one year in the future.



[.* would .*]	
 The presence of an Expires header field with a date value of some time in the future on a response that otherwise would by default be non-cacheable indicates that the response is cacheable, unless indicated otherwise by a Cache-Control header field (section 14.9).



[.* SHOULD .*]	
 The From request-header field, if given, SHOULD contain an Internet e-mail address for the human user who controls the requesting user agent.



[.* SHOULD .*]	
The address SHOULD be machine-usable, as defined by "mailbox" in RFC 822 [9] as updated by RFC 1123 [8]:



[.* MAY .*]	
 This header field MAY be used for logging purposes and as a means for identifying the source of invalid or unwanted requests.



[.* SHOULD .*]	
It SHOULD NOT be used as an insecure form of access protection.



[.* can .*]	[.* SHOULD .*]	
In particular, robot agents SHOULD include this header so that the person responsible for running the robot can be contacted if problems occur on the receiving end.



[.* MAY .*]	
 The Internet e-mail address in this field MAY be separate from the Internet host which issued the request.



[.* SHOULD .*]	
For example, when a request is passed through a proxy the original issuer's address SHOULD be used.



[.* might .*]	[.* SHOULD .*]	
 The client SHOULD NOT send the From header field without the user's approval, as it might conflict with the user's privacy interests or their site's security policy.



[.* MUST .*]	
The Host field value MUST represent the naming authority of the origin server or gateway given by the original URL.



[.* would .*]	
For example, a request on the origin server for <http://www.w3.org/pub/WWW/> would properly include:



[.* MUST .*]	
 A client MUST include a Host header field in all HTTP/1.1 request messages .



[.* MUST .*]	
If the requested URI does not include an Internet host name for the service being requested, then the Host header field MUST be given with an empty value.



[.* MUST .*]	
An HTTP/1.1 proxy MUST ensure that any request message it forwards does contain an appropriate Host header field that identifies the service being requested by the proxy.



[.* MUST .*]	
All Internet-based HTTP/1.1 servers MUST respond with a 400 (Bad Request) status code to any HTTP/1.1 request message which lacks a Host header field.



[.* can .*]	
A client that has one or more entities previously obtained from the resource can verify that one of those entities is current by including a list of their associated entity tags in the If-Match header field.



[.* would .*]	[.* have .* to .*]	[.* MAY .*]	
 If any of the entity tags match the entity tag of the entity that would have been returned in the response to a similar GET request (without the If-Match header) on that resource, or if "*" is given and any current entity exists for that resource, then the server MAY perform the requested method as if the If-Match header field did not exist.



[.* MUST .*]	
 A server MUST use the strong comparison function (see section 13.3.3) to compare the entity tags in If-Match.



[.* MUST .*]	
 If none of the entity tags match, or if "*" is given and no current entity exists, the server MUST NOT perform the requested method, and MUST return a 412 (Precondition Failed) response.



[.* MUST .*]	
 If the request would, without the If-Match header field, result in anything other than a 2xx or 412 status, then the If-Match header MUST be ignored.



[.* SHOULD .*]	[.* MUST .*]	
 The meaning of "If-Match: *" is that the method SHOULD be performed if the representation selected by the origin server (or by a cache, possibly using the Vary mechanism, see section 14.44) exists, and MUST NOT be performed if the representation does not exist.



[.* MUST .*]	[.* MAY .*]	
 A request intended to update a resource (e.g,, a PUT) MAY include an If-Match header field to signal that the request method MUST NOT be applied if the entity corresponding to the If-Match value (a single entity tag) is no longer a representation of that resource.



[.* either .* or .*]	
 The result of a request having both an If-Match header field and either an If-None-Match or an If-Modified-Since header fields is undefined by this specification.



[.* would .*]	
 a) If the request would normally result in anything other than a 200 (OK) status, or if the passed If-Modified-Since date is invalid, the response is exactly the same as for a normal GET.



[.* SHOULD .*]	
 c) If the variant has not been modified since a valid If- Modified-Since date, the server SHOULD return a 304 (Not Modified) response.



[.* might .*]	
 Note: If-Modified-Since times are interpreted by the server, whose clock might not be synchronized with the client.



[.* should .*]	
 Note: If a client uses an arbitrary date in the If-Modified-Since header instead of a date taken from the Last-Modified header for the same request, the client should be aware of the fact that this date is interpreted in the server's understanding of time.



[.* should .*]	
The client should consider unsynchronized clocks and rounding problems due to the different encodings of time between the client and server.



[.* has .* to .*]	
This includes the possibility of race conditions if the document has changed between the time it was first requested and the If-Modified-Since date of a subsequent request, and the possibility of clock-skew-related problems if the If-Modified- Since date is derived from the client's clock without correction to the server's clock.



[.* either .* or .*]	
 The result of a request having both an If-Modified-Since header field and either an If-Match or an If-Unmodified-Since header fields is undefined by this specification.



[.* can .*]	
A client that has one or more entities previously obtained from the resource can verify that none of those entities is current by including a list of their associated entity tags in the If-None-Match header field.



[.* would .*]	[.* have .* to .*]	[.* MUST .*]	
 If any of the entity tags match the entity tag of the entity that would have been returned in the response to a similar GET request (without the If-None-Match header) on that resource, or if "*" is given and any current entity exists for that resource, then the server MUST NOT perform the requested method, unless required to do so because the resource's modification date fails to match that supplied in an If-Modified-Since header field in the request.



[.* SHOULD .*]	
Instead, if the request method was GET or HEAD, the server SHOULD respond with a 304 (Not Modified) response, including the cache- related header fields (particularly ETag) of one of the entities that matched.



[.* MUST .*]	
For all other request methods, the server MUST respond with a status of 412 (Precondition Failed).



[.* can .*]	
The weak comparison function can only be used with GET or HEAD requests.



[.* MUST .*]	[.* MAY .*]	
If none of the entity tags match, then the server MAY perform the requested method as if the If-None-Match header field did not exist, but MUST also ignore any If-Modified-Since header field(s) in the request.



[.* MUST .*]	
That is, if no entity tags match, then the server MUST NOT return a 304 (Not Modified) response.



[.* MUST .*]	
 If the request would, without the If-None-Match header field, result in anything other than a 2xx or 304 status, then the If-None-Match header MUST be ignored.



[.* SHOULD .*]	[.* MUST .*]	
 The meaning of "If-None-Match: *" is that the method MUST NOT be performed if the representation selected by the origin server (or by a cache, possibly using the Vary mechanism, see section 14.44) exists, and SHOULD be performed if the representation does not exist.



[.* either .* or .*]	
 The result of a request having both an If-None-Match header field and either an If-Match or an If-Unmodified-Since header fields is undefined by this specification.



[.* could .*]	[.* has .* to .*]	
 If a client has a partial copy of an entity in its cache, and wishes to have an up-to-date copy of the entire entity in its cache, it could use the Range request-header with a conditional GET (using either or both of If-Unmodified-Since and If-Match.)



[.* would .*]	[.* have .* to .*]	[.* has .* to .*]	
However, if the condition fails because the entity has been modified, the client would then have to make a second request to obtain the entire current entity-body.



[.* MAY .*]	
 If-Range = "If-Range" ":" ( entity-tag | HTTP-date ) If the client has no entity tag for an entity, but does have a Last- Modified date, it MAY use that date in an If-Range header.



[.* can .*]	
(The server can distinguish between a valid HTTP-date and any form of entity-tag by examining no more than two characters.)



[.* SHOULD .*]	[.* MUST .*]	
The If-Range header SHOULD only be used together with a Range header, and MUST be ignored if the request does not include a Range header, or if the server does not support the sub-range operation.



[.* SHOULD .*]	
 If the entity tag given in the If-Range header matches the current entity tag for the entity, then the server SHOULD provide the specified sub-range of the entity using a 206 (Partial content) response.



[.* SHOULD .*]	
If the entity tag does not match, then the server SHOULD return the entire entity using a 200 (OK) response.



[.* SHOULD .*]	
If the requested resource has not been modified since the time specified in this field, the server SHOULD perform the requested operation as if the If-Unmodified-Since header were not present.



[.* MUST .*]	
 If the requested variant has been modified since the specified time, the server MUST NOT perform the requested operation, and MUST return a 412 (Precondition Failed).



[.* would .*]	[.* SHOULD .*]	
 If the request normally (i.e., without the If-Unmodified-Since header) would result in anything other than a 2xx or 412 status, the If-Unmodified-Since header SHOULD be ignored.



[.* either .* or .*]	
 The result of a request having both an If-Unmodified-Since header field and either an If-None-Match or an If-Modified-Since header fields is undefined by this specification.



[.* may .*]	
For files, it may be just the file system last-modified time.



[.* may .*]	
For entities with dynamically included parts, it may be the most recent of the set of last-modify times for its component parts.



[.* may .*]	
For database gateways, it may be the last-update time stamp of the record.



[.* may .*]	
For virtual objects, it may be the last time the internal state changed.



[.* MUST .*]	
 An origin server MUST NOT send a Last-Modified date which is later than the server's time of message origination.



[.* would .*]	[.* MUST .*]	
In such cases, where the resource's last modification would indicate some time in the future, the server MUST replace that date with the message origination date.



[.* SHOULD .*]	
 An origin server SHOULD obtain the Last-Modified value of the entity as close as possible to the time that it generates the Date value of its response.



[.* SHOULD .*]	
 HTTP/1.1 servers SHOULD send Last-Modified whenever feasible.



[.* SHOULD .*]	
For 3xx responses, the location SHOULD indicate the server's preferred URI for automatic redirection to the resource.



[.* can .*]	
 The Max-Forwards request-header field provides a mechanism with the TRACE (section 9.8) and OPTIONS (section 9.2) methods to limit the number of proxies or gateways that can forward the request to the next inbound server.



[.* can .*]	
This can be useful when the client is attempting to trace a request chain which appears to be failing or looping in mid-chain.



[.* may .*]	
 The Max-Forwards value is a decimal integer indicating the remaining number of times this request message may be forwarded.



[.* MUST .*]	
 Each proxy or gateway recipient of a TRACE or OPTIONS request containing a Max-Forwards header field MUST check and update its value prior to forwarding the request.



[.* MUST .*]	
If the received value is zero (0), the recipient MUST NOT forward the request; instead, it MUST respond as the final recipient.



[.* MUST .*]	
If the received Max-Forwards value is greater than zero, then the forwarded message MUST contain an updated Max-Forwards field with a value decremented by one (1).



[.* MAY .*]	
 The Max-Forwards header field MAY be ignored for all other methods defined by this specification and for any extension methods for which it is not explicitly referred to as part of that method definition.



[.* might .*]	
 The Pragma general-header field is used to include implementation- specific directives that might apply to any recipient along the request/response chain.



[.* MAY .*]	
All pragma directives specify optional behavior from the viewpoint of the protocol; however, some systems MAY require that behavior be consistent with the directives.



[.* SHOULD .*]	
 When the no-cache directive is present in a request message, an application SHOULD forward the request toward the origin server even if it has a cached copy of what is being requested.



[.* SHOULD .*]	
Clients SHOULD include both header fields when a no-cache request is sent to a server not known to be HTTP/1.1 compliant.



[.* might .*]	[.* MUST .*]	
Pragma directives MUST be passed through by a proxy or gateway application, regardless of their significance to that application, since the directives might be applicable to all recipients along the request/response chain.



[.* SHOULD .*]	
It is not possible to specify a pragma for a specific recipient; however, any pragma directive not relevant to a recipient SHOULD be ignored by that recipient.



[.* SHOULD .*]	
 HTTP/1.1 caches SHOULD treat "Pragma: no-cache" as if the client had sent "Cache-Control: no-cache".



[.* MUST .*]	
 The Proxy-Authenticate response-header field MUST be included as part of a 407 (Proxy Authentication Required) response.



[.* SHOULD .*]	
Unlike WWW-Authenticate, the Proxy-Authenticate header field applies only to the current connection and SHOULD NOT be passed on to downstream clients.



[.* might .*]	
However, an intermediate proxy might need to obtain its own credentials by requesting them from the downstream client, which in some circumstances will appear as if the proxy is forwarding the Proxy-Authenticate header field.



[.* MAY .*]	
A proxy MAY relay the credentials from the client request to the next proxy if that is the mechanism by which the proxies cooperatively authenticate a given request.



[.* MAY .*]	
 A byte range operation MAY specify a single range of bytes, or a set of ranges within a single entity.



[.* MUST .*]	
 If the last-byte-pos value is present, it MUST be greater than or equal to the first-byte-pos in that byte-range-spec, or the byte- range-spec is syntactically invalid.



[.* MUST .*]	
The recipient of a byte-range- set that includes one or more syntactically invalid byte-range-spec values MUST ignore the header field that includes that byte-range- set.



[.* can .*]	
 By its choice of last-byte-pos, a client can limit the number of bytes retrieved without knowing the size of the entity.



[.* SHOULD .*]	
If the byte-range-set is unsatisfiable, the server SHOULD return a response with a status of 416 (Requested range not satisfiable).



[.* SHOULD .*]	
Otherwise, the server SHOULD return a response with a status of 206 (Partial Content) containing the satisfiable ranges of the entity-body.



[.* MAY .*]	
 HTTP retrieval requests using conditional or unconditional GET methods MAY request one or more sub-ranges of the entity, instead of the entire entity, using the Range request header, which applies to the entity returned as the result of the request:



[.* MAY .*]	
 Range = "Range" ":" ranges-specifier A server MAY ignore the Range header.



[.* might .*]	
 In some cases, it might be more appropriate to use the If-Range header (see section 14.27) in addition to the Range header.



[.* SHOULD .*]	
 If a proxy that supports ranges receives a Range request, forwards the request to an inbound server, and receives an entire entity in reply, it SHOULD only return the requested range to its client.



[.* SHOULD .*]	
It SHOULD store the entire received response in its cache if that is consistent with its cache allocation policies.



[.* MUST .*]	
The Referer field MUST NOT be sent if the Request-URI was obtained from a source that does not have its own URI, such as input from the user keyboard.



[.* SHOULD .*]	
 Referer: http://www.w3.org/hypertext/DataSources/Overview.html If the field value is a relative URI, it SHOULD be interpreted relative to the Request-URI.



[.* MUST .*]	
The URI MUST NOT include a fragment.



[.* can .*]	
 The Retry-After response-header field can be used with a 503 (Service Unavailable) response to indicate how long the service is expected to be unavailable to the requesting client.



[.* MAY .*]	
This field MAY also be used with any 3xx (Redirection) response to indicate the minimum time the user-agent is asked wait before issuing the redirected request.



[.* can .*]	[.* either .* or .*]	
The value of this field can be either an HTTP-date or an integer number of seconds (in decimal) after the time of the response.



[.* can .*]	
The field can contain multiple product tokens (section 3.8) and comments identifying the server and any significant subproducts.



[.* MUST .*]	
 If the response is being forwarded through a proxy, the proxy application MUST NOT modify the Server response-header.



[.* SHOULD .*]	
Instead, it SHOULD include a Via field (as described in section 14.45).



[.* might .*]	
 Note: Revealing the specific software version of the server might allow the server machine to become more vulnerable to attacks against software that is known to contain security holes.



[.* may .*]	
Its value may consist of the keyword "trailers" and/or a comma-separated list of extension transfer-coding names with optional accept parameters (as described in section 3.6).



[.* MUST .*]	
Therefore, the keyword MUST be supplied within a Connection header field (section 14.10) whenever TE is present in an HTTP/1.1 message.



[.* either .* or .*]	
The implication is that, if given, the client is stating that either all downstream clients are willing to accept trailer fields in the forwarded response, or that it will attempt to buffer the response on behalf of downstream recipients.



[.* can .*]	
 Note: HTTP/1.1 does not define any means to limit the size of a chunked response such that a client can be assured of buffering the entire response.



[.* SHOULD .*]	
 An HTTP/1.1 message SHOULD include a Trailer header field in a message using chunked transfer-coding with a non-empty trailer.



[.* SHOULD .*]	
 If no Trailer header field is present, the trailer SHOULD NOT include any header fields.



[.* MUST .*]	
 Message header fields listed in the Trailer header field MUST NOT include the following header fields:



[.* has .* to .*]	
 The Transfer-Encoding general-header field indicates what (if any) type of transformation has been applied to the message body in order to safely transfer it between the sender and the recipient.



[.* have .* to .*]	[.* MUST .*]	
 Transfer-Encoding: chunked If multiple encodings have been applied to an entity, the transfer- codings MUST be listed in the order in which they were applied.



[.* MAY .*]	
Additional information about the encoding parameters MAY be provided by other entity-header fields not defined by this specification.



[.* would .*]	
 The Upgrade general-header allows the client to specify what additional communication protocols it supports and would like to use if the server finds it appropriate to switch protocols.



[.* MUST .*]	
The server MUST use the Upgrade header field within a 101 (Switching Protocols) response to indicate which protocol(s) are being switched.



[.* would .*]	
This eases the difficult transition between incompatible protocols by allowing the client to initiate a request in the more commonly supported protocol while indicating to the server that it would like to use a "better" protocol if available (where "better" is determined by the server, possibly according to the nature of the method and/or resource being requested).



[.* MUST .*]	
The capabilities and nature of the application-layer communication after the protocol change is entirely dependent upon the new protocol chosen, although the first action after changing the protocol MUST be a response to the initial HTTP request containing the Upgrade header field.



[.* MUST .*]	
Therefore, the upgrade keyword MUST be supplied within a Connection header field (section 14.10) whenever Upgrade is present in an HTTP/1.1 message.



[.* can .*]	
Any token can be used as a protocol name; however, it will only be useful if both the client and server associate the name with the same protocol.



[.* SHOULD .*]	
User agents SHOULD include this field with requests.



[.* can .*]	
The field can contain multiple product tokens (section 3.8) and comments identifying the agent and any subproducts which form a significant part of the user agent.



[.* SHOULD .*]	
 An HTTP/1.1 server SHOULD include a Vary header field with any cacheable response that is subject to server-driven negotiation.



[.* might .*]	[.* MAY .*]	
A server MAY include a Vary header field with a non-cacheable response that is subject to server-driven negotiation, since this might provide the user agent with useful information about the dimensions over which the response varies at the time of the response.



[.* MAY .*]	
A cache MAY assume that the same selection will be made for future requests with the same values for the listed field names, for the duration of time for which the response is fresh.



[.* may .*]	[.* MUST .*]	
The "*" value MUST NOT be generated by a proxy server; it may only be generated by an origin server.



[.* MUST .*]	
 The Via general-header field MUST be used by gateways and proxies to indicate the intermediate protocols and recipients between the user agent and the server on requests, and between the origin server and the client on responses.



[.* would .*]	
The protocol-name is optional if and only if it would be "HTTP".



[.* MAY .*]	
However, if the real host is considered to be sensitive information, it MAY be replaced by a pseudonym.



[.* MAY .*]	
If the port is not given, it MAY be assumed to be the default port of the received-protocol.



[.* MUST .*]	
Each recipient MUST append its information such that the end result is ordered according to the sequence of forwarding applications.



[.* MAY .*]	
 Comments MAY be used in the Via header field to identify the software of the recipient proxy or gateway, analogous to the User-Agent and Server header fields.



[.* MAY .*]	
However, all comments in the Via field are optional and MAY be removed by any recipient prior to forwarding the message.



[.* could .*]	
 For example, a request message could be sent from an HTTP/1.0 user agent to an internal proxy code-named "fred", which uses HTTP/1.1 to forward the request to a public proxy at nowhere.com, which completes the request by forwarding it to the origin server at www.ics.uci.edu.



[.* would .*]	
The request received by www.ics.uci.edu would then have the following Via header field:



[.* SHOULD .*]	
 Proxies and gateways used as a portal through a network firewall SHOULD NOT, by default, forward the names and ports of hosts within the firewall region.



[.* SHOULD .*]	
This information SHOULD only be propagated if explicitly enabled.



[.* SHOULD .*]	
If not enabled, the received-by host of any host behind the firewall SHOULD be replaced by an appropriate pseudonym for that host.



[.* MAY .*]	
 For organizations that have strong privacy requirements for hiding internal structures, a proxy MAY combine an ordered subsequence of Via header field entries with identical received-protocol values into a single such entry.



[.* could .*]	
 could be collapsed to



[.* SHOULD .*]	
 Via: 1.0 ricky, 1.1 mertz, 1.0 lucy Applications SHOULD NOT combine multiple entries unless they are all under the same organizational control and the hosts have already been replaced by pseudonyms.



[.* MUST .*]	
Applications MUST NOT combine entries which have different received-protocol values.



[.* might .*]	
 The Warning general-header field is used to carry additional information about the status or transformation of a message which might not be reflected in the message.



[.* MAY .*]	
 A response MAY carry more than one Warning header.



[.* SHOULD .*]	
 The warn-text SHOULD be in a natural language and character set that is most likely to be intelligible to the human user receiving the response.



[.* MAY .*]	
This decision MAY be based on any available knowledge, such as the location of the cache or user, the Accept-Language field in a request, the Content-Language field in a response, etc.



[.* MUST .*]	
 If a character set other than ISO-8859-1 is used, it MUST be encoded in the warn-text using the method described in RFC 2047 [14].



[.* can .*]	
 Warning headers can in general be applied to any message, however some specific warn-codes are specific to caches and can only be applied to response messages.



[.* SHOULD .*]	
New Warning headers SHOULD be added after any existing Warning headers.



[.* MUST .*]	
A cache MUST NOT delete any Warning header that it received with a message.



[.* SHOULD .*]	
However, if a cache successfully validates a cache entry, it SHOULD remove any Warning headers previously attached to that entry except as specified for specific Warning codes.



[.* MUST .*]	
It MUST then add any Warning headers received in the validating response.



[.* would .*]	
In other words, Warning headers are those that would be attached to the most recent relevant response.



[.* SHOULD .*]	
If it is not possible to inform the user of all of the warnings, the user agent SHOULD follow these heuristics:



[.* SHOULD .*]	
 Systems that generate multiple Warning headers SHOULD order them with this user agent behavior in mind.



[.* MUST .*]	
 110 Response is stale MUST be included whenever the returned response is stale.



[.* MUST .*]	
 111 Revalidation failed MUST be included if a cache returns a stale response because an attempt to revalidate the response failed, due to an inability to reach the server.



[.* SHOULD .*]	
 112 Disconnected operation SHOULD be included if the cache is intentionally disconnected from the rest of the network for a period of time.



[.* MUST .*]	
 113 Heuristic expiration MUST be included if the cache heuristically chose a freshness lifetime greater than 24 hours and the response's age is greater than 24 hours.



[.* MAY .*]	
 199 Miscellaneous warning The warning text MAY include arbitrary information to be presented to a human user, or logged.



[.* MUST .*]	
A system receiving this warning MUST NOT take any automated action, besides presenting the warning to the user.



[.* MUST .*]	
214 Transformation applied MUST be added by an intermediate cache or proxy if it applies any transformation changing the content-coding (as specified in the Content-Encoding header) or media-type (as specified in the Content-Type header) of the response, or the entity-body of the response, unless this Warning code already appears in the response.



[.* MAY .*]	
 299 Miscellaneous persistent warning The warning text MAY include arbitrary information to be presented to a human user, or logged.



[.* MUST .*]	
A system receiving this warning MUST NOT take any automated action.



[.* MUST .*]	
 If an implementation sends a message with one or more Warning headers whose version is HTTP/1.0 or lower, then the sender MUST include in each warning-value a warn-date that matches the date in the response.



[.* MUST .*]	
 If an implementation receives a message with a warning-value that includes a warn-date, and that warn-date is different from the Date value in the response, then that warning-value MUST be deleted from the message before storing, forwarding, or using it.



[.* MUST .*]	
If all of the warning-values are deleted for this reason, the Warning header MUST be deleted as well.



[.* MUST .*]	
 The WWW-Authenticate response-header field MUST be included in 401 (Unauthorized) response messages.



[.* can .*]	[.* might .*]	
User agents are advised to take special care in parsing the WWW- Authenticate field value as it might contain more than one challenge, or if more than one WWW-Authenticate header field is provided, the contents of a challenge itself can contain a comma-separated list of authentication parameters.



[.* SHOULD .*]	
), and SHOULD be very careful to prevent unintentional leakage of this information via the HTTP protocol to other sources.



[.* might .*]	
 A server is in the position to save personal data about a user's requests which might identify their reading patterns or subjects of interest.



[.* can .*]	
This information is clearly confidential in nature and its handling can be constrained by law in certain countries.



[.* SHOULD .*]	
Therefore, applications SHOULD supply as much control over this information as possible to the provider of that information.



[.* might .*]	
 Revealing the specific software version of the server might allow the server machine to become more vulnerable to attacks against software that is known to contain security holes.



[.* SHOULD .*]	
Implementors SHOULD make the Server header field a configurable option.



[.* SHOULD .*]	
 Proxies which serve as a portal through a network firewall SHOULD take special precautions regarding the transfer of header information that identifies the hosts behind the firewall.



[.* SHOULD .*]	
In particular, they SHOULD remove, or replace with sanitized versions, any Via fields generated behind the firewall.



[.* can .*]	
Although it can be very useful, its power can be abused if user details are not separated from the information contained in the Referer.



[.* would .*]	[.* might .*]	
Even when the personal information has been removed, the Referer header might indicate a private document's URI whose publication would be inappropriate.



[.* might .*]	[.* SHOULD .*]	
 The information sent in the From field might conflict with the user's privacy interests or their site's security policy, and hence it SHOULD NOT be transmitted without the user being able to disable, enable, and modify the contents of the field.



[.* MUST .*]	
The user MUST be able to set the contents of this field within a user preference or application defaults configuration.



[.* can .*]	[.* might .*]	
 The User-Agent (section 14.43) or Server (section 14.38) header fields can sometimes be used to determine that a specific client or server have a particular security hole which might be exploited.



[.* might .*]	
 Because the source of a link might be private information or might reveal an otherwise private information source, it is strongly recommended that the user be able to select whether or not the Referer field is sent.



[.* could .*]	[.* would .*]	
For example, a browser client could have a toggle switch for browsing openly/anonymously, which would respectively enable/disable the sending of Referer and From information.



[.* SHOULD .*]	
 Clients SHOULD NOT include a Referer header field in a (non-secure) HTTP request if the referring page was transferred with a secure protocol.



[.* SHOULD .*]	
 Authors of services which use the HTTP protocol SHOULD NOT use GET based forms for the submission of sensitive data, because this will cause this data to be encoded in the Request-URI.



[.* might .*]	
Many existing servers, proxies, and user agents will log the request URI in some place where it might be visible to third parties.



[.* can .*]	
Servers can use POST-based form submission instead



[.* can .*]	
 Accept request-headers can reveal information about the user to all servers which are accessed.



[.* can .*]	[.* would .*]	
The Accept-Language header in particular can reveal information the user would consider to be of a private nature, because the understanding of particular languages is often strongly correlated to the membership of a particular ethnic group.



[.* could .*]	[.* would .*]	
 An approach that limits the loss of privacy would be for a user agent to omit the sending of Accept-Language headers by default, and to ask the user whether or not to start sending Accept-Language headers to a server if it detects, by looking for any Vary response-header fields generated by the server, that such sending could improve the quality of service.



[.* can .*]	
 Elaborate user-customized accept header fields sent in every request, in particular if these include quality values, can be used by servers as relatively reliable and long-lived user identifiers.



[.* would .*]	
Such user identifiers would allow content providers to do click-trail tracking, and would allow collaborating content providers to match cross-server click-trails or form submissions of individual users.



[.* ought .* to .*]	
In environments where proxies are used to enhance privacy, user agents ought to be conservative in offering accept header configuration options to end users.



[.* could .*]	
As an extreme privacy measure, proxies could filter the accept headers in relayed requests.



[.* can .*]	[.* SHOULD .*]	
General purpose user agents which provide a high degree of header configurability SHOULD warn users about the loss of privacy which can be involved.



[.* SHOULD .*]	
 Implementations of HTTP origin servers SHOULD be careful to restrict the documents returned by HTTP requests to be only those that were intended by the server administrators.



[.* MUST .*]	
If an HTTP server translates HTTP URIs directly into file system calls, the server MUST take special care not to serve files that were not intended to be delivered to HTTP clients.



[.* would .*]	[.* MUST .*]	
On such a system, an HTTP server MUST disallow any such construct in the Request-URI if it would otherwise allow access to a resource outside those intended to be accessible via the HTTP server.



[.* might .*]	[.* MUST .*]	
Similarly, files intended for reference only internally to the server (such as access control files, configuration files, and script code) MUST be protected from inappropriate retrieval, since they might contain sensitive information.



[.* SHOULD .*]	
 In particular, HTTP clients SHOULD rely on their name resolver for confirmation of an IP number/DNS name association, rather than caching the result of previous host name lookups.



[.* can .*]	[.* SHOULD .*]	
Many platforms already can cache host name lookups locally when appropriate, and they SHOULD be configured to do so.



[.* MUST .*]	
 If HTTP clients cache the results of host name lookups in order to achieve a performance improvement, they MUST observe the TTL information reported by DNS.



[.* could .*]	
 If HTTP clients do not observe this rule, they could be spoofed when a previously-accessed server's IP address changes.



[.* MUST .*]	
 If a single server supports multiple organizations that do not trust one another, then it MUST check the values of Location and Content- Location headers in responses that are generated under control of said organizations to make sure that they do not attempt to invalidate resources over which they have no authority.



[.* can .*]	
Circumstances under which credential caching can interfere with the application's security model include but are not limited to:



[.* might .*]	[.* have .* to .*]	
 - Clients which have been idle for an extended period following which the server might wish to cause the client to reprompt the user for credentials.



[.* can .*]	
Compromise of the systems on which the proxies run can result in serious security and privacy problems.



[.* have .* to .*]	
Proxies have access to security-related information, personal information about individual users and organizations, and proprietary information belonging to users and content providers.



[.* might .*]	
A compromised proxy, or a proxy implemented or configured without regard to security and privacy considerations, might be used in the commission of a wide range of potential attacks.



[.* should .*]	[.* would .*]	
 Proxy operators should protect the systems on which proxies run as they would protect any system that contains or transports sensitive information.



[.* should .*]	
Log information should be carefully guarded, and appropriate guidelines for use developed and followed.



[.* can .*]	
Because cache contents persist after an HTTP request is complete, an attack on the cache can reveal information long after a user believes that the information has been removed from the network.



[.* should .*]	
Therefore, cache contents should be protected as sensitive information.



[.* should .*]	
 Proxy implementors should consider the privacy and security implications of their design and coding decisions, and of the configuration options they provide to proxy operators (especially the default configuration).



[.* may .*]	
 The judicious use of cryptography, when appropriate, may suffice to protect against a broad range of security and privacy attacks.



[.* have .* to .*]	
In addition to those already mentioned, the following individuals have contributed to this specification: Gary Adams                  Ross Patterson Harald Tveit Alvestrand     Albert Lunde Keith Ball                  John C. Mallery Brian Behlendorf            Jean-Philippe Martin-Flatin Paul Burchard               Mitra Maurizio Codogno            David Morris Mike Cowlishaw              Gavin Nicol Roman Czyborra              Bill Perry Michael A. Dolan            Jeffrey Perry David J. Fiander            Scott Powers Alan Freier                 Owen Rees Marc Hedlund                Luigi Rizzo Greg Herlihy                David Robinson Koen Holtman                Marc Salomon Alex Hopmann                Rich Salz Bob Jernigan                Allan M. Schiffman Shel Kaphan                 Jim Seidman Rohit Khare                 Chuck Shotton John Klensin                Eric W. Sink Martijn Koster              Simon E. Spero Alexei Kosut                Richard N. Taylor David M. Kristol            Robert S. Thau Daniel LaLiberte            Bill (BearHeart) Weinman Ben Laurie                  Francois Yergeau Paul J. Leach               Mary Ellen Zurko Daniel DuBois               Josh Cohen



[.* can .*]	
The message/http type can be used to enclose a single HTTP request or response message, provided that it obeys the MIME restrictions for all "message" types regarding line length and encodings.



[.* can .*]	
The application/http type can be used to enclose a pipeline of one or more HTTP request or response messages (not intermixed).



[.* can .*]	
If not present, the version can be determined from the first line of the body.



[.* can .*]	
If not present, the type can be determined from the first line of the body.



[.* can .*]	
If not present, the version can be determined from the first line of the body.



[.* can .*]	
If not present, the type can be determined from the first line of the body.



[.* may .*]	
 1) Additional CRLFs may precede the first boundary string in the entity.



[.* can .*]	
We therefore recommend that operational applications be tolerant of deviations whenever those deviations can be interpreted unambiguously.



[.* SHOULD .*]	
 Clients SHOULD be tolerant in parsing the Status-Line and servers tolerant when parsing the Request-Line.



[.* SHOULD .*]	
In particular, they SHOULD accept any amount of SP or HT characters between fields, even though only a single SP is required.



[.* SHOULD .*]	
 The character set of an entity-body SHOULD be labeled as the lowest common denominator of the character codes used within that body, with the exception that not labeling the entity is preferred over labeling the entity with the labels US-ASCII or ISO-8859-1.



[.* SHOULD .*]	
 - HTTP/1.1 clients and caches SHOULD assume that an RFC-850 date which appears to be more than 50 years in the future is in fact in the past (this helps solve the "year 2000" problem).



[.* MUST .*]	[.* MAY .*]	
 - An HTTP/1.1 implementation MAY internally represent a parsed Expires date as earlier than the proper value, but MUST NOT internally represent a parsed Expires date as later than the proper value.



[.* MUST .*]	
 - All expiration-related calculations MUST be done in GMT.



[.* MUST .*]	
The local time zone MUST NOT influence the calculation or comparison of an age or expiration time.



[.* MUST .*]	
- If an HTTP header incorrectly carries a date value with a time zone other than GMT, it MUST be converted into GMT using the most conservative possible conversion.



[.* SHOULD .*]	
Proxies and gateways to strict MIME environments SHOULD be aware of these differences and provide the appropriate conversions where necessary.



[.* might .*]	
Proxies and gateways from MIME environments to HTTP also need to be aware of the differences because some conversions might be required.



[.* MAY .*]	
However, HTTP/1.1 messages MAY include a single MIME-Version general-header field to indicate what version of the MIME protocol was used to construct the message.



[.* SHOULD .*]	
 Where it is possible, a proxy or gateway from HTTP to a strict MIME environment SHOULD translate all line breaks within the text media types described in section 3.7.1 of this document to the RFC 2049 canonical form of CRLF.



[.* might .*]	
Note, however, that this might be complicated by the presence of a Content-Encoding and by the fact that HTTP allows the use of some character sets which do not use octets 13 and 10 to represent CR and LF, as is the case for some multi-byte character sets.



[.* should .*]	
 Implementors should note that conversion will break any cryptographic checksums applied to the original content unless the original content is already in canonical form.



[.* SHOULD .*]	
Proxies and gateways from other protocols SHOULD ensure that any Date header field present in a message conforms to one of the HTTP/1.1 formats and rewrite the date if necessary.



[.* either .* or .*]	[.* MUST .*]	
Since this acts as a modifier on the media type, proxies and gateways from HTTP to MIME-compliant protocols MUST either change the value of the Content-Type header field or decode the entity-body before forwarding the message.



[.* have .* to .*]	
(Some experimental applications of Content-Type for Internet mail have used a media-type parameter of ";conversions=<content-coding>" to perform a function equivalent to Content-Encoding.



[.* MUST .*]	
Proxies and gateways from MIME-compliant protocols to HTTP MUST remove any non-identity CTE ("quoted-printable" or "base64") encoding prior to delivering the response message to an HTTP client.



[.* SHOULD .*]	
Such a proxy or gateway SHOULD label the data with an appropriate Content-Transfer-Encoding if doing so will improve the likelihood of safe transport over the destination protocol.



[.* MUST .*]	
Proxies/gateways MUST remove any transfer-coding prior to forwarding a message via a MIME-compliant protocol.



[.* can .*]	
 A process for decoding the "chunked" transfer-coding (section 3.6) can be represented in pseudo-code as:



[.* might .*]	
MHTML messages being transported by HTTP follow all conventions of MHTML, including line length limitations and folding, canonicalization, etc., since HTTP transports all message-bodies as payload (see section 3.7.2) and does not interpret the content or any MIME header lines that might be contained therein.



[.* has .* to .*]	
 The Content-Disposition response-header field has been proposed as a means for the origin server to suggest a default filename if the user requests that the content is saved to a file.



[.* SHOULD .*]	
 The receiving user agent SHOULD NOT respect any directory path information present in the filename-parm parameter, which is the only parameter believed to apply to HTTP implementations at this time.



[.* SHOULD .*]	
The filename SHOULD be treated as a terminal component only.



[.* should .*]	
 If this header is used in a response with the application/octet- stream content-type, the implied suggestion is that the user agent should not display the response, but directly enter a `save response as...' dialog.



[.* would .*]	
It is worth noting that, at the time of composing this specification (1996), we would expect commercial HTTP/1.1 servers to:



[.* would .*]	
 And we would expect HTTP/1.1 clients to:



[.* have .* to .*]	
The Internet will also be able to recover the IP addresses that have been allocated for the sole purpose of allowing special-purpose domain names to be used in root-level HTTP URLs.



[.* MUST .*]	
 - Both clients and servers MUST support the Host request-header.



[.* MUST .*]	
 - A client that sends an HTTP/1.1 request MUST send a Host header.



[.* MUST .*]	
 - Servers MUST report a 400 (Bad Request) error if an HTTP/1.1 request does not include a Host request-header.



[.* MUST .*]	
 - Servers MUST accept absolute URIs.



[.* might .*]	
 Some clients and servers might wish to be compatible with some previous implementations of persistent connections in HTTP/1.0 clients and servers.



[.* would .*]	[.* may .*]	
The problem was that some existing 1.0 clients may be sending Keep-Alive to a proxy server that doesn't understand Connection, which would then erroneously forward it to the next inbound server, which would establish the Keep-Alive connection and result in a hung HTTP/1.0 proxy waiting for the close on the response.



[.* must .*]	
The result is that HTTP/1.0 clients must be prevented from using Keep-Alive when talking to proxies.



[.* need .* to .*]	
Therefore, we need some other mechanism for indicating a persistent connection is desired, which is safe to use even when talking to an old proxy that ignores Connection.



[.* had .* to .*]	[.* has .* to .*]	
 This specification has been carefully audited to correct and disambiguate key word usage; RFC 2068 had many problems in respect to the conventions laid out in RFC 2119 [34].



[.* should .*]	
 Clarified which error code should be used for inbound server failures (e.g, DNS failures).



[.* may .*]	
 Transfer-coding and message lengths all interact in ways that required fixing exactly when chunked encoding is used (to allow for transfer encoding that may not be self delimiting); it was important to straighten out exactly how message lengths are computed.



[.* should .*]	
 Quality Values of zero should indicate that "I don't want something" to allow clients to refuse a representation.



[.* need .* to .*]	
We therefore need a mechanism to allow byteranges with a content-range not indicating the full length of the message.



[.* can .*]	[.* would .*]	
 Range request responses would become very verbose if all meta-data were always returned; by allowing the server to only send needed headers in a 206 response, this problem can be avoided.



[.* can .*]	[.* have .* to .*]	
 Rewrite of message transmission requirements to make it much harder for implementors to get it wrong, as the consequences of errors here can have significant impact on the Internet, and to deal with the following problems:



[.* should .*]	
Made it clear that user-agents should retry requests, not "clients" in general.



[.* MUST .*]	
Require that the origin server MUST NOT wait for the request body before it sends a required 100 (Continue) response.



[.* should .*]	
 Proxies should be able to add Content-Length when appropriate.



[.* could .*]	
 Warnings could be cached incorrectly, or not updated appropriately.



[.* may .*]	
(Section 13.1.2, 13.2.4, 13.5.2, 13.5.3, 14.9.3, and 14.46) Warning also needed to be a general header, as PUT or other methods may have need for it in requests.



[.* could .*]	[.* have .* to .*]	
TE also solves another, obscure, downward interoperability problem that could have occurred due to interactions between authentication trailers, chunked encoding and HTTP/1.0 clients.



[.* may .*]	
 This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works.



[.* must .*]	[.* may .*]	
However, this document itself may not be modified in any way, such as by removing the copyright notice or references to the Internet Society or other Internet organizations, except as needed for the purpose of developing Internet standards in which case the procedures for copyrights defined in the Internet Standards process must be followed, or as required to translate it into languages other than English.



