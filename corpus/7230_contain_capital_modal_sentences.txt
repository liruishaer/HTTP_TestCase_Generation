[.* MUST .*]	
Hence, a server MUST NOT assume that two requests on the same connection are from the same user agent unless the connection is secured and specific to that agent.



[.* MAY .*]	
Any client or server MAY employ a cache, though a cache cannot be used by a server while it is acting as a tunnel.



[.* MUST .*]	
A sender MUST NOT generate protocol elements that convey a meaning that is known by that sender to be false.



[.* MUST .*]	
A sender MUST NOT generate protocol elements that do not match the grammar defined by the corresponding ABNF rules.



[.* MUST .*]	
Within a given message, a sender MUST NOT generate protocol elements or syntax alternatives that are only allowed to be generated by participants in other roles (i.e., a role that the sender does not have for that message).



[.* MUST .*]	
 When a received protocol element is parsed, the recipient MUST be able to parse any value of reasonable length that is applicable to the recipient's role and that matches the grammar defined by the corresponding ABNF rules.



[.* MUST .*]	
 At a minimum, a recipient MUST be able to parse and process protocol element lengths that are at least as long as the values that it generates for those same protocol elements in other messages.



[.* MUST .*]	
 A recipient MUST interpret a received protocol element according to the semantics defined for it by this specification, including extensions to this specification, unless the recipient has determined (through experience or configuration) that the sender incorrectly implements what is implied by those semantics.



[.* MAY .*]	
 Unless noted otherwise, a recipient MAY attempt to recover a usable protocol element from an invalid construct.



[.* MUST .*]	
 Intermediaries that process HTTP messages (i.e., all intermediaries other than those acting as tunnels) MUST send their own HTTP-version in forwarded messages.



[.* SHOULD .*]	
 A client SHOULD send a request version equal to the highest version to which the client is conformant and whose major version is no higher than the highest version supported by the server, if this is known.



[.* MUST .*]	
A client MUST NOT send a version to which it is not conformant.



[.* MAY .*]	
 A client MAY send a lower request version if it is known that the server incorrectly implements the HTTP specification, but only after the client has attempted at least one normal request and determined from the response status code or header fields (e.g,, Server) that the server improperly handles higher request versions.



[.* SHOULD .*]	
 A server SHOULD send a response version equal to the highest version to which the server is conformant that has a major version less than or equal to the one received in the request.



[.* MUST .*]	
A server MUST NOT send a version to which it is not conformant.



[.* MAY .*]	
 A server MAY send an HTTP/1.0 response to a request if it is known or suspected that the client incorrectly implements the HTTP specification and is incapable of correctly processing later version responses, such as when a client fails to parse the version number correctly or when an intermediary is known to blindly forward the HTTP-version even when it doesn't conform to the given minor version of the protocol.



[.* SHOULD .*]	
Such protocol downgrades SHOULD NOT be performed unless triggered by specific client attributes, such as when one or more of the request header fields (e.g,, User-Agent) uniquely match the values sent by a client known to be in error.



[.* SHOULD .*]	
 When an HTTP message is received with a major version number that the recipient implements, but a higher minor version number than what the recipient implements, the recipient SHOULD process the message as if it were in the highest minor version within that major version to which the recipient is conformant.



[.* MUST .*]	
 A sender MUST NOT generate an "http" URI with an empty host identifier.



[.* MUST .*]	
A recipient that processes such a URI reference MUST reject it as invalid.



[.* MAY .*]	
 When an "http" URI is used within a context that calls for access to the indicated resource, a client MAY attempt access by resolving the host to an IP address, establishing a TCP connection to that address on the indicated port, and sending an HTTP request message (Section 3) containing the URI's identifying data (Section 5) to the server.



[.* MUST .*]	
A sender MUST NOT generate the userinfo subcomponent (and its "@" delimiter) when an "http" URI reference is generated within a message as a request target or header field value.



[.* SHOULD .*]	
Before making use of an "http" URI reference received from an untrusted source, a recipient SHOULD parse for userinfo and treat its presence as an error; it is likely being used to obscure the authority for the sake of phishing attacks.



[.* MUST .*]	
 All of the requirements listed above for the "http" scheme are also requirements for the "https" scheme, except that TCP port 443 is the default if the port subcomponent is empty or not given, and the user agent MUST ensure that its connection to the origin server is secured through the use of strong encryption, end-to-end, prior to sending the first HTTP request.



[.* MUST .*]	
 A recipient MUST parse an HTTP message as a sequence of octets in an encoding that is a superset of US-ASCII [USASCII].



[.* MUST .*]	
 A sender MUST NOT send whitespace between the start-line and the first header field.



[.* MUST .*]	
A recipient that receives whitespace between the start-line and the first header field MUST either reject the message as invalid or consume each whitespace-preceded line without further processing of it (i.e., ignore the entire line, along with any subsequent lines preceded by whitespace, until a properly formed header field is received or the header section is terminated).



[.* SHOULD .*]	
 Recipients of an invalid request-line SHOULD respond with either a 400 (Bad Request) error or a 301 (Moved Permanently) redirect with the request-target properly encoded.



[.* SHOULD .*]	
A recipient SHOULD NOT attempt to autocorrect and then process the request without a redirect, since the invalid request-line might be deliberately crafted to bypass security filters along the request chain.



[.* SHOULD .*]	
A server that receives a method longer than any that it implements SHOULD respond with a 501 (Not Implemented) status code.



[.* MUST .*]	
 request-target longer than any URI it wishes to parse MUST respond with a 414 (URI Too Long) status code (see Section 6.5.12 of [RFC7231]).



[.* SHOULD .*]	
A client SHOULD ignore the reason-phrase content.



[.* MUST .*]	
 A proxy MUST forward unrecognized header fields unless the field-name is listed in the Connection header field (Section 6.1) or the proxy is specifically configured to block, or otherwise transform, such fields.



[.* SHOULD .*]	
Other recipients SHOULD ignore unrecognized header fields.



[.* MUST .*]	
A server MUST NOT apply a request to the target resource until the entire request



[.* MUST .*]	
 A sender MUST NOT generate multiple header fields with the same field name in a message unless either the entire field value for that header field is defined as a comma-separated list [i.e., #(values)] or the header field is a well-known exception (as noted below).



[.* MAY .*]	
 A recipient MAY combine multiple header fields with the same field name into one "field-name: field-value" pair, without changing the semantics of the message, by appending each subsequent field value to the combined field value in order, separated by a comma.



[.* MUST .*]	
The order in which header fields with the same field name are received is therefore significant to the interpretation of the combined field value; a proxy MUST NOT change the order of these field values when forwarding a message.



[.* SHOULD .*]	
For protocol elements where optional whitespace is preferred to improve readability, a sender SHOULD generate the optional whitespace as a single SP; otherwise, a sender SHOULD NOT generate optional whitespace except as needed to white out invalid or unwanted protocol elements during in-place message filtering.



[.* SHOULD .*]	
A sender SHOULD generate RWS as a single SP.



[.* MUST .*]	
A sender MUST NOT generate BWS in messages.



[.* MUST .*]	
A recipient MUST parse for such bad whitespace and remove it before interpreting the protocol element.



[.* MUST .*]	
A server MUST reject any received request message that contains whitespace between a header field-name and colon with a response code of 400 (Bad Request).



[.* MUST .*]	
A proxy MUST remove any such whitespace from a response message before forwarding the message downstream.



[.* MUST .*]	
A sender MUST NOT generate a message that includes line folding (i.e., that has any field-value that contains a match to the obs-fold rule) unless the message is intended for packaging within the message/http media type.



[.* MUST .*]	
 A server that receives an obs-fold in a request message that is not within a message/http container MUST either reject the message by sending a 400 (Bad Request), preferably with a representation explaining that obsolete line folding is unacceptable, or replace each received obs-fold with one or more SP octets prior to interpreting the field value or forwarding the message downstream.



[.* MUST .*]	
 A proxy or gateway that receives an obs-fold in a response message that is not within a message/http container MUST either discard the message and replace it with a 502 (Bad Gateway) response, preferably with a representation explaining that unacceptable line folding was received, or replace each received obs-fold with one or more SP octets prior to interpreting the field value or forwarding the message downstream.



[.* MUST .*]	
 A user agent that receives an obs-fold in a response message that is not within a message/http container MUST replace each received obs-fold with one or more SP octets prior to interpreting the field value.



[.* SHOULD .*]	
Newly defined header fields SHOULD limit their field values to US-ASCII octets.



[.* SHOULD .*]	
A recipient SHOULD treat other octets in field content (obs-text) as opaque data.



[.* MUST .*]	
 A server that receives a request header field, or set of fields, larger than it wishes to process MUST respond with an appropriate 4xx (Client Error) status code.



[.* MAY .*]	
 A client MAY discard or truncate received header fields that are larger than the client wishes to process if the field semantics are such that the dropped value(s) can be safely ignored without changing the message framing or response semantics.



[.* MUST .*]	
Recipients that process the value of a quoted-string MUST handle a quoted-pair as if it were replaced by the octet following the backslash.



[.* SHOULD .*]	
 A sender SHOULD NOT generate a quoted-pair in a quoted-string except where necessary to quote DQUOTE and backslash octets occurring within that string.



[.* SHOULD .*]	
A sender SHOULD NOT generate a quoted-pair in a comment except where necessary to quote parentheses ["(" and ")"] and backslash octets occurring within that comment.



[.* MUST .*]	
 A recipient MUST be able to parse the chunked transfer coding (Section 4.1) because it plays a crucial role in framing messages when the payload body size is not known in advance.



[.* MUST .*]	
A sender MUST NOT apply chunked more than once to a message body (i.e., chunking an already chunked message is not allowed).



[.* MUST .*]	
If any transfer coding other than chunked is applied to a request payload body, the sender MUST apply chunked as the final transfer coding to ensure that the message is properly framed.



[.* MUST .*]	
If any transfer coding other than chunked is applied to a response payload body, the sender MUST either apply chunked as the final transfer coding or terminate the message by closing the connection.



[.* MAY .*]	
 Unlike Content-Encoding (Section 3.1.2.1 of [RFC7231]), Transfer-Encoding is a property of the message, not of the representation, and any recipient along the request/response chain MAY decode the received transfer coding(s) or apply additional transfer coding(s) to the message body, assuming that corresponding changes are made to the Transfer-Encoding field-value.



[.* MAY .*]	
 Transfer-Encoding MAY be sent in a response to a HEAD request or in a 304 (Not Modified) response (Section 4.1 of [RFC7232]) to a GET request, neither of which includes a message body, to indicate that the origin server would have applied a transfer coding to the message body if the request had been an unconditional GET.



[.* MUST .*]	
 A server MUST NOT send a Transfer-Encoding header field in any response with a status code of 1xx (Informational) or 204 (No Content).



[.* MUST .*]	
A server MUST NOT send a Transfer-Encoding header field in any 2xx (Successful) response to a CONNECT request (Section 4.3.6 of [RFC7231]).



[.* MUST .*]	
A client MUST NOT send a request containing Transfer-Encoding unless it knows the



[.* MUST .*]	
A server MUST NOT send a response containing Transfer-Encoding unless the corresponding request indicates HTTP/1.1 (or later).



[.* SHOULD .*]	
 A server that receives a request message with a transfer coding it does not understand SHOULD respond with 501 (Not Implemented).



[.* MUST .*]	
 A sender MUST NOT send a Content-Length header field in any message that contains a Transfer-Encoding header field.



[.* SHOULD .*]	
 A user agent SHOULD send a Content-Length in a request message when no Transfer-Encoding is sent and the request method defines a meaning for an enclosed payload body.



[.* SHOULD .*]	
A user agent SHOULD NOT send a Content-Length header field when the request message does not contain a payload body and the method semantics do not anticipate such a body.



[.* MUST .*]	[.* MAY .*]	
 A server MAY send a Content-Length header field in a response to a HEAD request (Section 4.3.2 of [RFC7231]); a server MUST NOT send Content-Length in such a response unless its field-value equals the decimal number of octets that would have been sent in the payload body of a response if the same request had used the GET method.



[.* MUST .*]	[.* MAY .*]	
 A server MAY send a Content-Length header field in a 304 (Not Modified) response to a conditional GET request (Section 4.1 of [RFC7232]); a server MUST NOT send Content-Length in such a response



[.* MUST .*]	
 A server MUST NOT send a Content-Length header field in any response with a status code of 1xx (Informational) or 204 (No Content).



[.* MUST .*]	
A server MUST NOT send a Content-Length header field in any 2xx (Successful) response to a CONNECT request (Section 4.3.6 of [RFC7231]).



[.* SHOULD .*]	
 Aside from the cases defined above, in the absence of Transfer-Encoding, an origin server SHOULD send a Content-Length header field when the payload body size is known prior to sending the complete header section.



[.* MUST .*]	
Since there is no predefined limit to the length of a payload, a recipient MUST anticipate potentially large decimal numerals and prevent parsing errors due to integer conversion overflows (Section 9.3).



[.* MUST .*]	
 If a message is received that has multiple Content-Length header fields with field-values consisting of the same decimal value, or a single Content-Length header field with a field value containing a list of identical decimal values (e.g,, "Content-Length: 42, 42"), indicating that duplicate Content-Length header fields have been generated or combined by an upstream message processor, then the recipient MUST either reject the message as invalid or replace the duplicated field-values with a single valid Content-Length field containing that decimal value prior to determining the message body length or forwarding the message.



[.* MUST .*]	
A client MUST ignore any Content-Length or Transfer-Encoding header fields received in such a message.



[.* MUST .*]	
If a Transfer-Encoding header field is present in a request and the chunked transfer coding is not the final encoding, the message body length cannot be determined reliably; the server MUST respond with the 400 (Bad Request) status code and then close the connection.



[.* MUST .*]	
A sender MUST remove the received Content-Length field prior to forwarding such a message downstream.



[.* MUST .*]	
If a message is received without Transfer-Encoding and with either multiple Content-Length header fields having differing field-values or a single Content-Length header field having an invalid value, then the message framing is invalid and the recipient MUST treat it as an unrecoverable error.



[.* MUST .*]	
If this is a request message, the server MUST respond with a 400 (Bad Request) status code and then close the connection.



[.* MUST .*]	
If this is a response message received by a proxy, the proxy MUST close the connection to the server, discard the received response, and send a 502 (Bad



[.* MUST .*]	
If this is a response message received by a user agent, the user agent MUST close the connection to the server and discard the received response.



[.* MUST .*]	
If the sender closes the connection or the recipient times out before the indicated number of octets are received, the recipient MUST consider the message to be incomplete and close the connection.



[.* SHOULD .*]	
 Since there is no way to distinguish a successfully completed, close-delimited message from a partially received message interrupted by network failure, a server SHOULD generate encoding or length-delimited messages whenever possible.



[.* MAY .*]	
 A server MAY reject a request that contains a message body but not a Content-Length by responding with 411 (Length Required).



[.* SHOULD .*]	
 Unless a transfer coding other than chunked has been applied, a client that sends a request containing a message body SHOULD use a valid Content-Length header field if the message body length is known in advance, rather than the chunked transfer coding, since some existing services respond to chunked with a 411 (Length Required) status code even though they understand the chunked transfer coding.



[.* MUST .*]	
 A user agent that sends a request containing a message body MUST send a valid Content-Length header field if it does not know the server will handle HTTP/1.1 (or later) requests; such knowledge can be in the form of specific user configuration or by remembering the version of a prior received response.



[.* MAY .*]	
 If the final response to the last request on a connection has been completely received and there remains additional data to read, a user agent MAY discard the remaining data or attempt to determine if that



[.* MUST .*]	
A client MUST NOT process, cache, or forward such extra data as a separate response, since such behavior would be vulnerable to cache poisoning.



[.* MAY .*]	
 A server that receives an incomplete request message, usually due to a canceled request or a triggered timeout exception, MAY send an error response prior to closing the connection.



[.* MUST .*]	
 A client that receives an incomplete response message, which can occur when a connection is closed prematurely or when decoding a supposedly chunked transfer coding fails, MUST record the message as incomplete.



[.* MUST .*]	
An HTTP/1.1 user agent MUST NOT preface or follow a request with an extra CRLF.



[.* MUST .*]	
If terminating the request message body with a line-ending is desired, then the user agent MUST count the terminating CRLF octets as part of the message body length.



[.* SHOULD .*]	
 In the interest of robustness, a server that is expecting to receive and parse a request-line SHOULD ignore at least one empty line (CRLF) received prior to the request-line.



[.* MAY .*]	
 Although the line terminator for the start-line and header fields is the sequence CRLF, a recipient MAY recognize a single LF as a line terminator and ignore any preceding CR.



[.* MAY .*]	
 Although the request-line and status-line grammar rules require that each of the component elements be separated by a single SP octet, recipients MAY instead parse on whitespace-delimited word boundaries and, aside from the CRLF terminator, treat any form of whitespace as the SP separator while ignoring preceding or trailing whitespace; such whitespace includes one or more of the following octets: SP, HTAB, VT (%x0B), FF (%x0C), or bare CR.



[.* SHOULD .*]	
 When a server listening only for HTTP request messages, or processing what appears from the start-line to be an HTTP request message, receives a sequence of octets that does not match the HTTP-message grammar aside from the robustness exceptions listed above, the server SHOULD respond with a 400 (Bad Request) response.



[.* MUST .*]	
 A recipient MUST be able to parse and decode the chunked transfer coding.



[.* MUST .*]	
 A recipient MUST ignore unrecognized chunk extensions.



[.* MUST .*]	
 A sender MUST NOT generate a trailer that contains a field necessary for message framing (e.g,, Transfer-Encoding and Content-Length), routing (e.g,, Host), request modifiers (e.g,, controls and conditionals in Section 5 of [RFC7231]), authentication (e.g,, see [RFC7235] and [RFC6265]), response control data (e.g,, see Section 7.1 of [RFC7231]), or determining how to process the payload (e.g,, Content-Encoding, Content-Type, Content-Range, and Trailer).



[.* MAY .*]	
 When a chunked message containing a non-empty trailer is received, the recipient MAY process the fields (aside from those forbidden above) as if they were appended to the message's header section.



[.* MUST .*]	
A recipient MUST ignore (or consider as an error) any fields that are forbidden to be sent in a trailer, since processing them as if they were present in the header section might bypass external security filters.



[.* SHOULD .*]	
 Unless the request includes a TE header field indicating "trailers" is acceptable, as described in Section 4.3, a server SHOULD NOT generate trailer fields that it believes are necessary for the user agent to receive.



[.* SHOULD .*]	
A recipient SHOULD consider "x-compress" to be equivalent to "compress".



[.* SHOULD .*]	
A recipient SHOULD consider "x-gzip" to be equivalent to "gzip".



[.* MUST .*]	
A client MUST NOT send the chunked transfer coding name in TE; chunked is always acceptable for HTTP/1.1 recipients.



[.* MAY .*]	
 When multiple transfer codings are acceptable, the client MAY rank the codings by preference using a case-insensitive "q" parameter (similar to the qvalues used in content negotiation fields, Section



[.* MUST .*]	
 Since the TE header field only applies to the immediate connection, a sender of TE MUST also send a "TE" connection option within the Connection header field (Section 6.1) in order to prevent the TE field from being forwarded by intermediaries that do not support its semantics.



[.* SHOULD .*]	
 When a message includes a message body encoded with the chunked transfer coding and the sender desires to send metadata in the form of trailer fields at the end of the message, the sender SHOULD generate a Trailer header field before the message body to indicate which fields will be present in the trailers.



[.* MUST .*]	
 When making a request directly to an origin server, other than a CONNECT or server-wide OPTIONS request (as detailed below), a client MUST send only the absolute path and query components of the target URI as the request-target.



[.* MUST .*]	
If the target URI's path component is empty, the client MUST send "/" as the path within the origin-form of request-target.



[.* MUST .*]	
 When making a request to a proxy, other than a CONNECT or server-wide OPTIONS request (as detailed below), a client MUST send the target URI in absolute-form as the request-target.



[.* MUST .*]	
 To allow for transition to the absolute-form for all requests in some future version of HTTP, a server MUST accept the absolute-form in requests, even though HTTP/1.1 clients will only send them in requests to proxies.



[.* MUST .*]	
 When making a CONNECT request to establish a tunnel through one or more proxies, a client MUST send only the target URI's authority component (excluding any userinfo and its "@" delimiter) as the request-target.



[.* MUST .*]	
 When a client wishes to request OPTIONS for the server as a whole, as opposed to a specific named resource of that server, the client MUST send only "*" (%x2A) as the request-target.



[.* MUST .*]	
 If a proxy receives an OPTIONS request with an absolute-form of request-target in which the URI has an empty path and no query component, then the last proxy on the request chain MUST send a request-target of "*" when it forwards the request to the indicated origin server.



[.* MUST .*]	
 A client MUST send a Host header field in all HTTP/1.1 request messages.



[.* MUST .*]	
If the target URI includes an authority component, then a client MUST send a field-value for Host that is identical to that authority component, excluding any userinfo subcomponent and its "@" delimiter (Section 2.7.1).



[.* MUST .*]	
If the authority component is missing or undefined for the target URI, then a client MUST send a Host header field with an empty field-value.



[.* SHOULD .*]	
 Since the Host field-value is critical information for handling a request, a user agent SHOULD generate Host as the first header field following the request-line.



[.* MUST .*]	
 A client MUST send a Host header field in an HTTP/1.1 request even if the request-target is in the absolute-form, since this allows the Host information to be forwarded through ancient HTTP/1.0 proxies that might not have implemented Host.



[.* MUST .*]	
 When a proxy receives a request with an absolute-form of request-target, the proxy MUST ignore the received Host header field (if any) and instead replace it with the host information of the request-target.



[.* MUST .*]	
A proxy that forwards such a request MUST generate a new Host field-value based on the received request-target rather than forward the received Host field-value.



[.* MUST .*]	
 A server MUST respond with a 400 (Bad Request) status code to any HTTP/1.1 request message that lacks a Host header field and to any request message that contains more than one Host header field or a Host header field with an invalid field-value.



[.* MUST .*]	
 A client that has more than one outstanding request on a connection MUST maintain a list of outstanding requests in the order sent and MUST associate each received response message on that connection to the highest ordered request that has not yet received a final (non-1xx) response.



[.* MUST .*]	
 An intermediary not acting as a tunnel MUST implement the Connection header field, as specified in Section 6.1, and exclude fields from being forwarded that are only intended for the incoming connection.



[.* MUST .*]	
 An intermediary MUST NOT forward a message to itself unless it is protected from an infinite request loop.



[.* MUST .*]	
 A proxy MUST send an appropriate Via header field, as described below, in each message that it forwards.



[.* MUST .*]	[.* MAY .*]	
An HTTP-to-HTTP gateway MUST send an appropriate Via header field in each inbound request message and MAY send a Via header field in forwarded response messages.



[.* MAY .*]	
However, if the real host is considered to be sensitive information, a sender MAY replace it with a pseudonym.



[.* MAY .*]	
If a port is not provided, a recipient MAY interpret that as meaning it was received on the default TCP port, if any, for the received-protocol.



[.* MAY .*]	
 A sender MAY generate comments in the Via header field to identify the software of each recipient, analogous to the User-Agent and Server header fields.



[.* MAY .*]	
However, all comments in the Via field are optional, and a recipient MAY remove them prior to forwarding the message.



[.* SHOULD .*]	
 An intermediary used as a portal through a network firewall SHOULD NOT forward the names and ports of hosts within the firewall region unless it is explicitly enabled to do so.



[.* SHOULD .*]	
If not enabled, such an intermediary SHOULD replace each received-by host of any host behind the firewall by an appropriate pseudonym for that host.



[.* MAY .*]	
 An intermediary MAY combine an ordered subsequence of Via header field entries into a single such entry if the entries have identical received-protocol values.



[.* SHOULD .*]	
 A sender SHOULD NOT combine multiple entries unless they are all under the same organizational control and the hosts have already been replaced by pseudonyms.



[.* MUST .*]	
A sender MUST NOT combine entries that have different received-protocol values.



[.* MAY .*]	
 If a proxy receives a request-target with a host name that is not a fully qualified domain name, it MAY add its own domain to the host name it received when forwarding the request.



[.* MUST .*]	
A proxy MUST NOT change the host name if the request-target contains a fully qualified domain name.



[.* MUST .*]	
 A proxy MUST NOT modify the "absolute-path" and "query" parts of the received request-target when forwarding it to the next inbound server, except as noted above to replace an empty path with "/" or "*".



[.* MAY .*]	
 A proxy MAY modify the message body through application or removal of a transfer coding (Section 4).



[.* MUST .*]	
 A proxy MUST NOT transform the payload (Section 3.3 of [RFC7231]) of a message that contains a no-transform cache-control directive (Section 5.2 of [RFC7234]).



[.* MAY .*]	
 A proxy MAY transform the payload of a message that does not contain a no-transform cache-control directive.



[.* MUST .*]	
A proxy that transforms a payload MUST add a Warning header field with the warn-code of 214 ("Transformation Applied") if one is not already in the message (see Section 5.5 of [RFC7234]).



[.* SHOULD .*]	
 A proxy SHOULD NOT modify header fields that provide information about the endpoints of the communication chain, the resource state, or the selected representation (other than the payload) unless the field's definition specifically allows such modification or the modification is deemed necessary for privacy or security.



[.* MUST .*]	
In order to avoid confusing downstream recipients, a proxy or gateway MUST remove or replace any received connection options before forwarding the message.



[.* MUST .*]	
 When a header field aside from Connection is used to supply control information for or about the current connection, the sender MUST list the corresponding field-name within the Connection header field.



[.* MUST .*]	
A proxy or gateway MUST parse a received Connection header field before a message is forwarded and, for each connection-option in this field, remove any header field(s) from the message with the same name as the connection-option, and then remove the Connection header field itself (or replace it with the intermediary's own connection options for the forwarded message).



[.* MUST .*]	
 A sender MUST NOT send a connection option corresponding to a header field that is intended for all recipients of the payload.



[.* MUST .*]	
 A client that does not support persistent connections MUST send the "close" connection option in every request message.



[.* MUST .*]	
 A server that does not support persistent connections MUST send the "close" connection option in every response message that does not have a 1xx (Informational) status code.



[.* SHOULD .*]	
HTTP implementations SHOULD support persistent connections.



[.* MAY .*]	
 A client MAY send additional requests on a persistent connection until it sends or receives a "close" connection option or receives an HTTP/1.0 response without a "keep-alive" connection option.



[.* MUST .*]	
A server MUST read the entire request message body or close the connection after sending its response, since otherwise the remaining data on a persistent connection would be misinterpreted as the next request.



[.* MUST .*]	
Likewise, a client MUST read the entire response message body if it intends to reuse the same connection for a subsequent request.



[.* MUST .*]	
 A proxy server MUST NOT maintain a persistent connection with an HTTP/1.0 client (see Section 19.7.1 of [RFC2068] for information and discussion of the problems with the Keep-Alive header field implemented by many HTTP/1.0 clients).



[.* MAY .*]	
 When an inbound connection is closed prematurely, a client MAY open a new connection and automatically retransmit an aborted sequence of requests if all of those requests have idempotent methods (Section 4.2.2 of [RFC7231]).



[.* MUST .*]	
A proxy MUST NOT automatically retry non-idempotent requests.



[.* MUST .*]	
 A user agent MUST NOT automatically retry a request with a non- idempotent method unless it has some means to know that the request semantics are actually idempotent, regardless of the method, or some means to detect that the original request was never applied.



[.* SHOULD .*]	
 A client SHOULD NOT automatically retry a failed automatic retry.



[.* MAY .*]	
 A client that supports persistent connections MAY "pipeline" its requests (i.e., send multiple requests without waiting for each response).



[.* MUST .*]	[.* MAY .*]	
A server MAY process a sequence of pipelined requests in parallel if they all have safe methods (Section 4.2.1 of [RFC7231]), but it MUST send the corresponding responses in the same order that the requests were received.



[.* SHOULD .*]	
 A client that pipelines requests SHOULD retry unanswered requests if the connection closes before it receives all of the corresponding responses.



[.* MUST .*]	
When retrying pipelined requests after a failed connection (a connection not explicitly closed by the server in its last complete response), a client MUST NOT pipeline immediately after connection establishment, since the first remaining request in the prior pipeline might have caused an error response that can be lost again if multiple requests are sent on a prematurely closed connection (see the TCP reset problem described in Section 6.6).



[.* SHOULD .*]	
A user agent SHOULD NOT pipeline requests after a non-idempotent method, until the final response status code for that method has been received, unless the user agent has a means to detect and recover from partial failure conditions involving the pipelined sequence.



[.* MAY .*]	
 An intermediary that receives pipelined requests MAY pipeline those requests when forwarding them inbound, since it can rely on the outbound user agent(s) to determine what requests can be safely pipelined.



[.* SHOULD .*]	[.* MAY .*]	
If the inbound connection fails before receiving a response, the pipelining intermediary MAY attempt to retry a sequence of requests that have yet to receive a response if the requests all have idempotent methods; otherwise, the pipelining intermediary SHOULD forward any received responses and then close the corresponding outbound connection(s) so that the outbound user agent(s) can recover accordingly.



[.* SHOULD .*]	
 A client or server that wishes to time out SHOULD issue a graceful close on the connection.



[.* SHOULD .*]	
Implementations SHOULD constantly monitor open connections for a received closure signal and respond to it as appropriate, since prompt closure of both sides of a connection enables allocated system resources to be reclaimed.



[.* MAY .*]	
 A client, server, or proxy MAY close the transport connection at any time.



[.* SHOULD .*]	
 A server SHOULD sustain persistent connections, when possible, and allow the underlying transport's flow-control mechanisms to resolve temporary overloads, rather than terminate connections with the expectation that clients will retry.



[.* SHOULD .*]	
 A client sending a message body SHOULD monitor the network connection for an error response while it is transmitting the request.



[.* SHOULD .*]	
If the client sees a response that indicates the server does not wish to receive the message body and is closing the connection, the client SHOULD immediately cease transmitting the body and close its side of the connection.



[.* SHOULD .*]	
 The Connection header field (Section 6.1) provides a "close" connection option that a sender SHOULD send when it wishes to close the connection after the current request/response pair.



[.* MUST .*]	
 A client that sends a "close" connection option MUST NOT send further requests on that connection (after the one containing "close") and MUST close the connection after reading the final response message corresponding to this request.



[.* MUST .*]	
 A server that receives a "close" connection option MUST initiate a close of the connection (see below) after it sends the final response to the request that contained "close".



[.* SHOULD .*]	
The server SHOULD send a "close" connection option in its final response on that connection.



[.* MUST .*]	
The server MUST NOT process any further requests received on that connection.



[.* MUST .*]	
 A server that sends a "close" connection option MUST initiate a close of the connection (see below) after it sends the response containing "close".



[.* MUST .*]	
The server MUST NOT process any further requests received on that connection.



[.* SHOULD .*]	[.* MUST .*]	
 A client that receives a "close" connection option MUST cease sending requests on that connection and close the connection after reading the response message containing the "close"; if additional pipelined requests had been sent on the connection, the client SHOULD NOT assume that they will be processed by the server.



[.* MAY .*]	
A client MAY send a list of protocols in the Upgrade header field of a request to invite the server to switch to one or more of those protocols, in order of descending preference, before sending the final response.



[.* MAY .*]	
A server MAY ignore a received Upgrade header field if it wishes to continue using the current protocol on that connection.



[.* MUST .*]	
 A server that sends a 101 (Switching Protocols) response MUST send an Upgrade header field to indicate the new protocol(s) to which the connection is being switched; if multiple protocol layers are being switched, the sender MUST list the protocols in layer-ascending order.



[.* MUST .*]	
A server MUST NOT switch to a protocol that was not indicated by the client in the corresponding request's Upgrade header field.



[.* MAY .*]	
 server MAY choose to ignore the order of preference indicated by the client and select the new protocol(s) based on other factors, such as the nature of the request or the current load on the server.



[.* MUST .*]	
 A server that sends a 426 (Upgrade Required) response MUST send an Upgrade header field to indicate the acceptable protocols, in order of descending preference.



[.* MAY .*]	
 A server MAY send an Upgrade header field in any other response to advertise that it implements support for upgrading to the listed protocols, in order of descending preference, when appropriate for a future request.



[.* MUST .*]	
A server MUST NOT switch protocols unless the received message semantics can be honored by the new protocol; an OPTIONS request can be honored by any protocol.



[.* MUST .*]	
 When Upgrade is sent, the sender MUST also send a Connection header field (Section 6.1) that contains an "upgrade" connection option, in order to prevent Upgrade from being accidentally forwarded by intermediaries that might not implement the listed protocols.



[.* MUST .*]	
A server MUST ignore an Upgrade header field that is received in an HTTP/1.0 request.



[.* MUST .*]	
If a server receives both an Upgrade and an Expect header field with the "100-continue" expectation (Section 5.1.1 of [RFC7231]), the server MUST send a 100 (Continue) response before sending a 101 (Switching Protocols) response.



[.* MUST .*]	
 In any production that uses the list construct, a sender MUST NOT generate empty list elements.



[.* MUST .*]	
In other words, a sender MUST generate lists that satisfy the following syntax:



[.* MUST .*]	
 For compatibility with legacy list rules, a recipient MUST parse and ignore a reasonable number of empty list elements: enough to handle common mistakes by senders that merge values, but not so much that they could be used as a denial-of-service mechanism.



[.* MUST .*]	
In other words, a recipient MUST accept lists that satisfy the following syntax:



[.* MUST .*]	
 Registrations MUST include the following fields:



[.* MUST .*]	
 Names of transfer codings MUST NOT overlap with names of content codings (Section 3.1.2.1 of [RFC7231]) unless the encoding transformation is identical, as is the case for the compression codings defined in Section 4.2.



[.* MUST .*]	
 Values to be added to this namespace require IETF Review (see Section 4.1 of [RFC5226]), and MUST conform to the purpose of transfer coding defined in this specification.



[.* MUST .*]	
The registration MUST name a responsible party for the registration.



[.* MUST .*]	
The registration MUST name a point of contact.



[.* MAY .*]	
The registration MAY name a set of specifications associated with that token.



[.* SHOULD .*]	
The registration SHOULD name a set of expected "protocol-version" tokens associated with that token at the time of registration.



[.* MAY .*]	
The responsible party MAY change the registration at any time.



[.* MAY .*]	
The IESG MAY reassign responsibility for a protocol token.



